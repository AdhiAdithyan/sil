[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.879718",
  "module": "sil",
  "name": "Sales Order Item Filter",
  "script": "frappe.ui.form.on('Sales Order', {\n    custom_sales_type : function(frm) {\n        frm.fields_dict.items.grid.get_field('item_code').get_query = function(doc, cdt, cdn) {\n            let row = locals[cdt][cdn];\n            let filters = {};\n\n            if (frm.doc.custom_sales_type === \"B2C PRODUCT INDIA\" || frm.doc.custom_sales_type === \"B2B PRODUCT INDIA\") {\n                filters = {\n                    \"custom_item_classification\": [\"in\", [\"Finished Software\", \"Finished Products\",\"Miscellaneous\"]]\n                };\n            } else if (frm.doc.custom_sales_type === \"B2C SPARES INDIA\" || frm.doc.custom_sales_type === \"B2B SPARES INDIA\") {\n                filters = {\n                    \"custom_item_classification\": [\"in\", [\"Raw Materials and Spares\",\"License\",\"Miscellaneous\"]]\n                };\n            } else if (frm.doc.custom_sales_type === \"B2C AMC INDIA\" || frm.doc.custom_sales_type === \"B2B AMC INDIA\") {\n                filters = {\n                    \"custom_item_classification\": \"Annual Maintenance\"\n                };\n            } else {\n                filters = {\n                    \"custom_item_classification\": [\"in\", [\"Annual Maintenance\", \"Raw Materials\", \"Spares\", \"Finished Software\", \"Finished Products\"]]\n                };\n            }\n\n            return {\n                filters: filters\n            };\n        };\n    }\n});\n    ",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.841919",
  "module": "sil",
  "name": "Sales Invoice Item Filter",
  "script": "frappe.ui.form.on('Sales Invoice', {\n    custom_sales_type : function(frm) {\n        frm.fields_dict.items.grid.get_field('item_code').get_query = function(doc, cdt, cdn) {\n            let row = locals[cdt][cdn];\n            let filters = {};\n\n            if (frm.doc.custom_sales_type === \"B2C PRODUCT INDIA\" || frm.doc.custom_sales_type === \"B2B PRODUCT INDIA\") {\n                filters = {\n                    \"custom_item_classification\": [\"in\", [\"Finished Software\", \"Finished Products\",\"Miscellaneous\"]]\n                };\n            } else if (frm.doc.custom_sales_type === \"B2C SPARES INDIA\" || frm.doc.custom_sales_type === \"B2B SPARES INDIA\") {\n                filters = {\n                    \"custom_item_classification\": [\"in\", [\"Raw Materials and Spares\",\"Miscellaneous\",\"License\"]]\n                };\n            } else if (frm.doc.custom_sales_type === \"B2C AMC INDIA\" || frm.doc.custom_sales_type === \"B2B AMC INDIA\") {\n                filters = {\n                    \"custom_item_classification\": \"Annual Maintenance\"\n                };\n            } else {\n                filters = {\n                    \"custom_item_classification\": [\"in\", [\"Annual Maintenance\", \"Raw Materials\", \"Spares\", \"Finished Software\", \"Finished Products\"]]\n                };\n            }\n\n            return {\n                filters: filters\n            };\n        };\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2024-08-12 11:19:15.526107",
  "module": "sil",
  "name": "Cluster Filter With State SO",
  "script": "frappe.ui.form.on('Sales Order', {\n    custom_state: function(frm) {\n    frm.set_query(\"custom_cluster\", function() {\n            return {\n                \"filters\": {\n                    \"stateprovince\": frm.doc.custom_state,\n                   \n                }\n            };\n        });\n    },\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 0,
  "modified": "2024-08-12 11:19:59.654482",
  "module": "sil",
  "name": "Cluster Filter With State SI",
  "script": "frappe.ui.form.on('Sales Invoice', {\n    custom_state_province: function(frm) {\n        // Define a function to set the query filter\n        function updateCustomClusterQuery(custom_clusters) {\n            frm.set_query(\"custom_cluster\", function() {\n                return {\n                    filters: custom_clusters.length > 0 \n                        ? [[\"name\", \"in\", custom_clusters]]\n                        : [\"name\", \"in\",frm.doc.custom_state_province ]  \n                };\n            });\n            frm.refresh_field(\"custom_cluster\");  \n        }\n\n        if (frm.doc.custom_state_province) {\n            console.log(\"State/Province Selected: \", frm.doc.custom_state_province);\n\n            frappe.call({\n                method: \"sil.services.cluster_api.get_custom_clusters\",\n                args: {\n                    state_province: frm.doc.custom_state_province\n                },\n                callback: function(r) {\n                    console.log(\"API Response: \", r);\n\n                    if (r.message && r.message.length > 0) {\n                        var custom_clusters = r.message.map(item => item.parent);\n                        console.log(\"Custom Clusters: \", custom_clusters);\n                        updateCustomClusterQuery(custom_clusters);  \n                    } else {\n                        console.log(\"No clusters found.\");\n                        updateCustomClusterQuery([frm.doc.custom_state_province]);  // Clear the filter\n                    }\n                },\n                error: function(err) {\n                    console.error(\"API Call Error: \", err);\n                    updateCustomClusterQuery([frm.doc.custom_state_province]);  // Clear the filter on error\n                }\n            });\n        } else {\n            // If no state/province is selected, clear the filter\n            updateCustomClusterQuery([frm.doc.custom_state_province]);\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.799616",
  "module": "sil",
  "name": "Sales Invoice Sales Type Filter",
  "script": "frappe.ui.form.on('Sales Invoice', {\n    billing_address_gstin: function(frm) {\n        if (frm.doc.billing_address_gstin) {\n            frm.set_df_property('custom_sales_type', 'options', [\n                'B2B PRODUCT INDIA',\n                'B2B SPARES INDIA',\n                'B2B CONSUMABLES INDIA',\n                'B2B AMC INDIA',\n                'SALES INTERNATIONAL',\n                'AMAZON SALES',\n                'B2B DELHI OFC'\n            ]);\n        } else {\n            frm.set_df_property('custom_sales_type', 'options', [\n                'B2C PRODUCT INDIA',\n                'B2C SPARES INDIA',\n                'B2C CONSUMABLES INDIA',\n                'B2C AMC INDIA',\n                'B2C DELHI OFC'\n            ]);\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.779173",
  "module": "sil",
  "name": "Sales Order Sales Type filter",
  "script": "frappe.ui.form.on('Sales Order', {\n    billing_address_gstin: function(frm) {\n        if (frm.doc.billing_address_gstin) {\n            frm.set_df_property('custom_sales_type', 'options', [\n                'B2B PRODUCT INDIA',\n                'B2B SPARES INDIA',\n                'B2B CONSUMABLES INDIA',\n                'B2B AMC INDIA',\n                'SALES INTERNATIONAL',\n                'AMAZON SALES',\n                'B2B DELHI OFC'\n            ]);\n        } else {\n            frm.set_df_property('custom_sales_type', 'options', [\n                'B2C PRODUCT INDIA',\n                'B2C SPARES INDIA',\n                'B2C CONSUMABLES INDIA',\n                'B2C AMC INDIA',\n                'B2C DELHI OFC'\n            ]);\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2024-09-26 10:37:08.251192",
  "module": "sil",
  "name": "Sales order Button Click",
  "script": "frappe.ui.form.on('Sales Order', {\r\n    custom_create_serial_no: function(frm) {\r\n        customCreateSerialNo(frm);\r\n    }\r\n});\r\n\r\nfunction customCreateSerialNo(frm) {\r\n    let items_series_data = {};\r\n\r\n    // Gathering data from custom item series\r\n    frm.doc.custom_item_series.forEach(function(item_series, index) {\r\n        items_series_data[index] = {\r\n            \"customer\": frm.doc.customer,\r\n            \"sales_order_name\": frm.doc.name,\r\n            \"item_name\":item_series.item_name,\r\n            \"item_code\": item_series.item_code,\r\n            \"item_family\": item_series.item_family,\r\n            \"quantity\": item_series.quantity,\r\n            \"item_series\": item_series.item_series,\r\n            \"serial_nos\": item_series.serial_no || \"\"\r\n        };\r\n    });\r\n\r\n    // Show progress dialog\r\n    let progress_dialog = frappe.msgprint({\r\n        message: __('Processing items...'),\r\n        indicator: 'blue',\r\n        title: __('Please Wait'),\r\n        wide: true,\r\n        buttons: []\r\n    });\r\n\r\n    let total_items = Object.keys(items_series_data).length;\r\n    let processed_items = 0;\r\n\r\n    // Iterate over item series data and call method to create serial numbers\r\n    Object.keys(items_series_data).forEach(function(key) {\r\n        let item_series = items_series_data[key];\r\n        \r\n        frappe.call({\r\n            method: \"sil.services.sales_order_api.generateSerialNo\", // Replace with your method path\r\n            args: {\r\n                items_series: JSON.stringify({ [key]: item_series }), // Passing data as JSON\r\n                form_doc: frm.doc.name // Send form doc if necessary\r\n            },\r\n            callback: function(response) {\r\n                console.log('Response received:', response);\r\n\r\n                // Check for success response\r\n                if (response.message && response.message.success) {\r\n                    // Access serial numbers using the key\r\n                    let serial_data = response.message.serial_nos[key]; \r\n                    if (serial_data) {\r\n                        let item = frm.doc.custom_item_series.find(i => i.item_code === item_series.item_code);\r\n                        if (item) {\r\n                            // Update the 'serial_no' field with the serial_Nos from the response\r\n                            frappe.model.set_value(item.doctype, item.name, 'serial_no', serial_data.serial_Nos);\r\n                            console.log('Serial Nos updated for item:', item_series.item_code, 'Serial Nos:', serial_data.serial_Nos);\r\n                        }\r\n                    }\r\n                    frappe.msgprint(\"Serial No created successfully for item: \" + item_series.item_code);\r\n                } else {\r\n                    frappe.msgprint(\"Serial No creation failed for item: \" + item_series.item_code + \" - \" + (response.message.message || 'Unknown error'));\r\n                }\r\n\r\n                frm.refresh_field('custom_item_series');\r\n\r\n                // Track processed items\r\n                processed_items += 1;\r\n\r\n                // Hide progress dialog when all items are processed\r\n                if (processed_items === total_items) {\r\n                    progress_dialog.hide();\r\n                }\r\n            },\r\n            error: function(error) {\r\n                console.error('Error processing item:', item_series.item_code, 'Error:', error);\r\n                processed_items += 1;\r\n                frappe.msgprint(\"Error processing item: \" + item_series.item_code);\r\n\r\n                if (processed_items === total_items) {\r\n                    progress_dialog.hide();\r\n                }\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Cluster Manager",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.753122",
  "module": "sil",
  "name": "Cluster Managers filter",
  "script": "frappe.ui.form.on('Cluster Managers', {\n    refresh: function(frm) {\n        frm.set_query(\"parent_cluster\", function() {\n            return {\n                \"filters\": {\n                    \"workflow_state\": \"Approved\"  // Filters parent clusters with status 'Submitted'\n                }\n            };\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.731470",
  "module": "sil",
  "name": "Invoice Billing Series Name",
  "script": "frappe.ui.form.on('Sales Invoice', {\n     refresh: function(frm) {\n        frm.trigger('update_naming_series');\n    },\n    custom_sales_type: function(frm) {\n        frm.trigger('update_naming_series');\n    },\n    update_naming_series: function(frm) {\n        if (frm.doc.custom_sales_type === \"B2B PRODUCT INDIA\") {\n            frm.set_value('naming_series', \"SI24B25/I./\");\n        } else if (frm.doc.custom_sales_type === \"B2C PRODUCT INDIA\") {\n            frm.set_value('naming_series', \"SI24C25/I./\");\n        } else if (frm.doc.custom_sales_type === \"B2B CONSUMABLES INDIA\") {\n            frm.set_value('naming_series', \"SI24B25/C./\");\n        } else if (frm.doc.custom_sales_type === \"B2C CONSUMABLES INDIA\") {\n            frm.set_value('naming_series', \"SI24C25/C./\");\n        } else if (frm.doc.custom_sales_type === \"B2B SPARES INDIA\") {\n            frm.set_value('naming_series', \"SI24B25/S./\");\n        } else if (frm.doc.custom_sales_type === \"B2C SPARES INDIA\") {\n            frm.set_value('naming_series', \"SI24C25/S./\");\n        } else if (frm.doc.custom_sales_type === \"B2B AMC INDIA\") {\n            frm.set_value('naming_series', \"SI24B25/A./\");\n        } else if (frm.doc.custom_sales_type === \"B2C AMC INDIA\") {\n            frm.set_value('naming_series', \"SI24C25/A./\");\n        } else if (frm.doc.custom_sales_type === \"SALES INTERNATIONAL\") {\n            frm.set_value('naming_series', \"SI24I25/F./\");\n\t\t} else if (frm.doc.custom_sales_type === \"AMAZON SALES\") {\n            frm.set_value('naming_series', \"IN.-.###./.24-25\");\n\t\t} else if (frm.doc.custom_sales_type === \"B2B DELHI OFC\") {\n            frm.set_value('naming_series', \"SID24B25/I./\");\n        } else if (frm.doc.custom_sales_type === \"B2C DELHI OFC\") {\n            frm.set_value('naming_series', \"SID24C25/I./\");\n        } else {\n            frm.set_value('naming_series', \"\");\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.709936",
  "module": "sil",
  "name": "Salesorder Billing series",
  "script": "frappe.ui.form.on('Sales Order', {\n    custom_sales_type: function(frm) {\n        // Update the naming_series field based on custom_sales_type field\n        if (frm.doc.custom_sales_type === \"B2B PRODUCT INDIA\") {\n            frm.set_value('naming_series', \"SO24B25/I./\");\n        } else if (frm.doc.custom_sales_type === \"B2C PRODUCT INDIA\") {\n            frm.set_value('naming_series', \"SO24C25/I./\");\n        } else if (frm.doc.custom_sales_type === \"B2B CONSUMABLES INDIA\") {\n            frm.set_value('naming_series', \"SO24B25/C./\");\n        } else if (frm.doc.custom_sales_type === \"B2C CONSUMABLES INDIA\") {\n            frm.set_value('naming_series', \"SO24C25/C./\");\n        } else if (frm.doc.custom_sales_type === \"B2B SPARES INDIA\") {\n            frm.set_value('naming_series', \"SO24B25/S./\");\n        } else if (frm.doc.custom_sales_type === \"B2C SPARES INDIA\") {\n            frm.set_value('naming_series', \"SO24C25/S./\");\n        } else if (frm.doc.custom_sales_type === \"B2B AMC INDIA\") {\n            frm.set_value('naming_series', \"SO24B25/A./\");\n        } else if (frm.doc.custom_sales_type === \"B2C AMC INDIA\") {\n            frm.set_value('naming_series', \"SO24C25/A./\");\n        } else if (frm.doc.custom_sales_type === \"SALES INTERNATIONAL\") {\n            frm.set_value('naming_series', \"SO24I25/F./\");\n        }  else if (frm.doc.custom_sales_type === \"AMAZON SALES\") {\n            frm.set_value('naming_series', \"INSO-.FY./\");\n\t\t} else if (frm.doc.custom_sales_type === \"B2B DELHI OFC\") {\n            frm.set_value('naming_series', \"SOD24B25/I./\");\n        } else if (frm.doc.custom_sales_type === \"B2C DELHI OFC\") {\n            frm.set_value('naming_series', \"SOD24C25/I./\");\n        } else {\n            frm.set_value('naming_series', \"\");\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Issue",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.690094",
  "module": "sil",
  "name": "Filter Employes",
  "script": "frappe.ui.form.on('Issue', {\n    custom_item_classification: function(frm) {\n\tif (frm.doc.custom_item_classification == \"Finished Software\")\n        frm.set_query(\"custom_attended_by_\", function() {\n            return {\n                \"filters\": {\n                    \"department\": \"Projects And Technical Solutions - SIL\",                    \n                }\n            };\n        });\n    },\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.314574",
  "module": "sil",
  "name": "Sales Table Series No",
  "script": "frappe.ui.form.on('Sales Order', {\n        refresh: function(frm) {\n            if (frm.doc.custom_approval_status === \"Customer Support Approved\") {\n                if (frm.doc.custom_validation_check != 1) {\n                    \n                    frm.set_value(\"custom_validation_check\", 1);\n    \n                    frm.doc.items.forEach(function(row) {\n                        let item_series = frm.add_child('custom_item_series');\n                        item_series.item_code = row.item_code;\n                        item_series.item_name = row.item_name;\n                        item_series.item_family = row.custom_item_family;\n                        item_series.quantity = row.qty;\n                    });\n                    \n                    frm.refresh_field('custom_item_series');\n                }\n            }\n        }\n    });\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Issue",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.664270",
  "module": "sil",
  "name": "Item filter with the help of item classification",
  "script": "frappe.ui.form.on('Issue', {\n    custom_item_group: function(frm) {\n        frm.set_query(\"custom_items\", function() {\n            return {\n                \"filters\": {\n                    \"item_group\": frm.doc.custom_item_group,\n                    \"custom_item_classification\": frm.doc.custom_item_classification\n                }\n            };\n        });\n    },\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.641871",
  "module": "sil",
  "name": "Sales order Committed Date",
  "script": "frappe.ui.form.on('Sales Invoice', {\n    posting_date(frm) {\n        frm.set_value(\"custom_expiry_date\", frappe.datetime.add_days(frm.doc.transaction_date, 365));\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Issue Type",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.616006",
  "module": "sil",
  "name": "Item load with help of Item group",
  "script": "frappe.ui.form.on('Issue Type', {\n    custom_item_group: function(frm) {\n        frm.set_query(\"custom_item\", function() {\n            return {\n                \"filters\": {\n                    \"item_group\": frm.doc.custom_item_group\n                }\n            };\n        });\n    },\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2024-08-12 11:22:21.681774",
  "module": "sil",
  "name": "Ware house sales order",
  "script": "frappe.ui.form.on('Sales Order', {\nrefresh(frm) {\n    frappe.ui.keys.add_shortcut({\n        shortcut: 'f2',\n        action: async () => {\n            try {\n                const itemResponse = await frappe.call({\n                    method: 'frappe.client.get_list',\n                    args: {\n                        doctype: 'Item',\n                        fields: ['name', 'item_code', 'item_name', 'item_group', 'stock_uom', 'description', 'last_purchase_rate']\n                    }\n                });\n\n                if (itemResponse && itemResponse.message && itemResponse.message.length > 0) {\n                    const itemDetails = itemResponse.message;\n                    const d = new frappe.ui.Dialog({\n                        title: __('Item Details'),\n                        size: 'large'\n                    });\n\n                    let itemInfoHtml = `\n                        <div class=\"modal-body\">\n                            <table class=\"table table-bordered\">\n                                <thead>\n                                    <tr>\n                                        <th>Item Code</th>\n                                        <th>Item Name</th>\n                                        <th>Item Group</th>\n                                        <th>Stock UOM</th>\n                                        <th>Description</th>\n                                        <th>Last Purchase Rate</th>\n                                        <th>Warehouse</th>\n                                        <th>Stock Quantity</th>\n                                    </tr>\n                                </thead>\n                                <tbody>`;\n\n                    // Loop through each item\n                    for (const item of itemDetails) {\n                        const binResponse = await frappe.call({\n                            method: 'frappe.client.get_list',\n                            args: {\n                                doctype: 'Bin',\n                                filters: { item_code: item.item_code },\n                                fields: ['warehouse', 'actual_qty']\n                            }\n                        });\n\n                        let warehouseHtml = '';\n                        let stockQtyHtml = '';\n\n                        if (binResponse && binResponse.message && binResponse.message.length > 0) {\n                            const binDetails = binResponse.message;\n                            binDetails.forEach(bin => {\n                                warehouseHtml += `${bin.warehouse}<br>`;\n                                stockQtyHtml += `${bin.actual_qty}<br>`;\n                            });\n                        } else {\n                            warehouseHtml = 'N/A';\n                            stockQtyHtml = 'N/A';\n                        }\n\n                        itemInfoHtml += `\n                            <tr>\n                                <td>${item.item_code}</td>\n                                <td>${item.item_name}</td>\n                                <td>${item.item_group}</td>\n                                <td>${item.stock_uom}</td>\n                                <td>${item.description}</td>\n                                <td>${item.last_purchase_rate}</td>\n                                <td>${warehouseHtml}</td>\n                                <td>${stockQtyHtml}</td>\n                            </tr>`;\n                    }\n\n                    itemInfoHtml += `\n                                </tbody>\n                            </table>\n                        </div>`;\n\n                    $(itemInfoHtml).appendTo(d.body);\n                    d.show();\n                } else {\n                    frappe.msgprint('No item details found.');\n                }\n            } catch (err) {\n                console.error('Error fetching data:', err);\n                frappe.msgprint('Error fetching item details. Please try again.');\n            }\n        },\n        page: this.page,\n        description: __('Get Item Details'),\n        ignore_inputs: true\n    });\n} });",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2024-08-12 11:16:33.818142",
  "module": "sil",
  "name": "Sales order Net total",
  "script": "frappe.ui.form.on('Sales Order', {\n      before_save: function (frm) {\n        frm.set_value(\"custom_net_totals\", frm.doc.net_total);\n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2024-08-12 11:36:22.842987",
  "module": "sil",
  "name": "Sales order Rounded total",
  "script": "frappe.ui.form.on('Sales Order', {\n\tbefore_save: function (frm) {\n        frm.set_value(\"custom_rounded_total\", frm.doc.rounded_total);\n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2024-08-12 11:37:57.983612",
  "module": "sil",
  "name": "Sales order 3 field populate",
  "script": "frappe.ui.form.on('Sales Order', {\n    before_save: function (frm) {\n        frm.set_value(\"custom_total_qty\", frm.doc.total_qty);\n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.487081",
  "module": "sil",
  "name": "Confirmation msg for workflow",
  "script": "frappe.ui.form.on('Sales Order', {\n    before_workflow_action: async (frm) => {\n        let promise = new Promise((resolve, reject) => {\n         frappe.dom.unfreeze()\n            frappe.confirm(\n                \"<b>Are you sure you want to proceed?</b><ul>\",\n                () => resolve(), // User confirms\n                () => reject()   // User rejects\n            );\n        });\n        await promise.catch(() => frappe.throw()); // If the promise is rejected, throw an error\n    },\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.464910",
  "module": "sil",
  "name": "Sales order gst",
  "script": "frappe.ui.form.on('Sales Order', {\n    custom_gst_category: function(frm) {\n        // Update custom_sales_type field options based on custom_gst_category value\n        if (frm.doc.custom_customer_location_type == \"India\") {\n            if (frm.doc.custom_gst_category == \"Registered Composition\" ||\n                frm.doc.custom_gst_category == \"Registered Regular\") {\n                frm.fields_dict['custom_sales_type'].set_input(\"B2B AMC INDIA\\nB2B SPARES INDIA\\nB2B CONSUMABLES INDIA\\nB2B PRODUCT INDIA\");\n            } else if (frm.doc.custom_gst_category == \"Unregistered\") {\n                frm.fields_dict['custom_sales_type'].set_input(\"B2C AMC INDIA\\nB2C SPARES INDIA\\nB2C CONSUMABLES INDIA\\nB2C PRODUCT INDIA\");\n            }\n        } else if (frm.doc.custom_customer_location_type == \"International\") {\n            frm.fields_dict['custom_sales_type'].set_input(\"SALES INTERNATIONAL\");\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "General Messages",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.437605",
  "module": "sil",
  "name": "General Messages",
  "script": "frappe.ui.form.on('General Messages', {\n    hr: function(frm) {\n        if (cur_frm.doc.hr == 1) {\n            cur_frm.set_value(\"role1\", \"HR User\");\n        }\n    },\n\n    reporting_authority: function(frm) {\n        if (cur_frm.doc.reporting_authority == 1) {\n            cur_frm.set_value(\"role1\", \"Reporting Authority\");\n        }\n    },\n    \n    after_save: function(frm) {\n        if(cur_frm.doc.reporting_authority == 1 && cur_frm.doc.hr == 1){\n              cur_frm.set_value(\"role1\", \"Bothpermission\");\n        }\n        \n    }\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leave Application",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.412712",
  "module": "sil",
  "name": "Leave application Popup",
  "script": "frappe.ui.form.on('Leave Application', {\n\tafter_save(frm) {\n\talert(__(\"Submit to confirm Actions->Submit\"));\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.359818",
  "module": "sil",
  "name": "Changes in Tally updated",
  "script": "frappe.ui.form.on('Sales Invoice', {\n    refresh: function(frm) {\n        if (frm.doc.status == 'Cancelled') {\n            if (frm.doc.custom_is_updated == 0) {\n                frm.doc.custom_is_updated = 1;\n                frm.doc.is_tallyupdated = 0;\n                frm.save();\n            }\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.391895",
  "module": "sil",
  "name": "Add custom Button",
  "script": "frappe.ui.form.on('Sales Invoice', {\n    refresh: function(frm) {\n        frm.add_custom_button(__('Issue'), function(){\n            new frappe.ui.form.MultiSelectDialog({\n                doctype: \"Issue\",\n                target: frm,\n                setters: {},\n                get_query() {\n                    return {\n                        filters: { status: 'Closed' }\n                    }\n                },\n                action(selections) {\n                    if (selections && selections.length > 0) {\n                       $.each(selections, function (i, custom_item) {\n                           console.log(custom_item);\n                           frappe.db.get_list('Issue', {\n                                fields: ['customer','custom_item.itemss','custom_item.qty'],\n                                filters: {\"name\": custom_item}\n                            }).then(records => {\n                                console.log(records);\n                                frm.set_value(\"customer\", records[0].customer);\n                                frm.clear_table(\"items\");\n\t\t\t\t\t\t\t\t\t// frm.add_child(\"items\",{\n\t\t\t\t\t\t\t\t//   item_code: records[0].itemss,\n\t\t\t\t\t\t\t\t//   qty:records[0].qty\n\t\t\t\t\t\t\t\t// });\n                                let row = frm.add_child(\"items\");\n                                frappe.model.set_value(row.doctype, row.name, \"item_code\", records[0].itemss);\n                                frappe.model.set_value(row.doctype, row.name, \"qty\", records[0].qty);\n                                frm.refresh_field(\"items\");\n                            }).catch(err => {\n                                console.error(err);\n                            });\n                        });\n                        $(\".modal\").modal(\"hide\");\n                    }\n                }\n            });\n        }, __(\"Get Items From\"));\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 0,
  "modified": "2024-08-12 11:29:37.981786",
  "module": "sil",
  "name": "Cluster Filter Sales Invoice",
  "script": "frappe.ui.form.on('Sales Invoice', {\n    custom_state: function(frm) {\n        // Define a function to set the query filter\n        function updateCustomClusterQuery(custom_clusters) {\n            frm.set_query(\"custom_cluster\", function() {\n                return {\n                    filters: custom_clusters.length > 0 \n                        ? [[\"name\", \"in\", custom_clusters]]\n                        : [\"name\", \"in\",frm.doc.custom_state ]  \n                };\n            });\n            frm.refresh_field(\"custom_cluster\");  \n        }\n\n        if (frm.doc.custom_state) {\n            console.log(\"State/Province Selected: \", frm.doc.custom_state);\n\n            frappe.call({\n                method: \"erpnext.stock.doctype.item.api.get_custom_clusters\",\n                args: {\n                    state_province: frm.doc.custom_state\n                },\n                callback: function(r) {\n                    console.log(\"API Response: \", r);\n\n                    if (r.message && r.message.length > 0) {\n                        var custom_clusters = r.message.map(item => item.parent);\n                        console.log(\"Custom Clusters: \", custom_clusters);\n                        updateCustomClusterQuery(custom_clusters);  \n                    } else {\n                        console.log(\"No clusters found.\");\n                        updateCustomClusterQuery([frm.doc.custom_state]);  // Clear the filter\n                    }\n                },\n                error: function(err) {\n                    console.error(\"API Call Error: \", err);\n                    updateCustomClusterQuery([frm.doc.custom_state]);  // Clear the filter on error\n                }\n            });\n        } else {\n            // If no state/province is selected, clear the filter\n            updateCustomClusterQuery([frm.doc.custom_state]);\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2024-08-12 11:30:13.991019",
  "module": "sil",
  "name": "Cluster Filter in Sales Order",
  "script": "frappe.ui.form.on('Sales Order', {\n    custom_state: function(frm) {\n        // Define a function to set the query filter\n        function updateCustomClusterQuery(custom_clusters) {\n            frm.set_query(\"custom_cluster\", function() {\n                return {\n                    filters: custom_clusters.length > 0 \n                        ? [[\"name\", \"in\", custom_clusters]]\n                        : [\"name\", \"in\",frm.doc.custom_state ]  \n                };\n            });\n            frm.refresh_field(\"custom_cluster\");  \n        }\n\n        if (frm.doc.custom_state) {\n            console.log(\"State/Province Selected: \", frm.doc.custom_state);\n\n            frappe.call({\n                method: \"erpnext.stock.doctype.item.api.get_custom_clusters\",\n                args: {\n                    state_province: frm.doc.custom_state\n                },\n                callback: function(r) {\n                    console.log(\"API Response: \", r);\n\n                    if (r.message && r.message.length > 0) {\n                        var custom_clusters = r.message.map(item => item.parent);\n                        console.log(\"Custom Clusters: \", custom_clusters);\n                        updateCustomClusterQuery(custom_clusters);  \n                    } else {\n                        console.log(\"No clusters found.\");\n                        updateCustomClusterQuery([frm.doc.custom_state]);  // Clear the filter\n                    }\n                },\n                error: function(err) {\n                    console.error(\"API Call Error: \", err);\n                    updateCustomClusterQuery([frm.doc.custom_state]);  // Clear the filter on error\n                }\n            });\n        } else {\n            // If no state/province is selected, clear the filter\n            updateCustomClusterQuery([frm.doc.custom_state]);\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Shift Type",
  "enabled": 1,
  "modified": "2024-10-11 10:24:52.255216",
  "module": "sil",
  "name": "Weekly Checkin Report",
  "script": "frappe.ui.form.on('Shift Type', {\n    refresh: function(frm) {\n        // Add a custom button to open the filter dialog\n        frm.add_custom_button(__('Generate Check-in Report'), function() {\n            open_filter_dialog(frm);\n        });\n    }\n});\n\nfunction open_filter_dialog(frm) {\n    // Create a dialog with employee, from date, and to date fields\n    let dialog = new frappe.ui.Dialog({\n        title: 'Filter for Check-in Report',\n        fields: [\n            {\n                label: 'Employee',\n                fieldname: 'employee',\n                fieldtype: 'Link',\n                options: 'Employee',\n                reqd: 0  // Optional\n            },\n            {\n                label: 'From Date',\n                fieldname: 'from_date',\n                fieldtype: 'Date',\n                default: frappe.datetime.get_today(),\n                columns: 2,\n                reqd: 1  // Required field\n            },\n             {\n                fieldtype: 'Column Break' // Start a new column\n            },\n            {\n                label: 'To Date',\n                fieldname: 'to_date',\n                fieldtype: 'Date',\n                default: frappe.datetime.get_today(),\n                columns: 2,\n                reqd: 1  // Required field\n            }\n        ],\n        primary_action_label: 'Generate Report',\n        primary_action(values) {\n            try {\n                // Ensure valid input\n                if (!values.from_date || !values.to_date) {\n                    frappe.msgprint(__('Please fill all required fields.'));\n                    return;\n                }\n\n                // Validate that the 'to_date' is not earlier than 'from_date'\n                if (values.to_date < values.from_date) {\n                    frappe.msgprint(__('To Date cannot be earlier than From Date.'));\n                    return;\n                }\n\n                // Call the server-side function to generate the report\n                frappe.call({\n                    method: 'sil.services.checkin_report_api.get_combined_checkin_report_to_hr',\n                    args: {\n                        employee_name: values.employee || '', // Use empty string if no employee selected\n                        from_date: values.from_date,\n                        to_date: values.to_date\n                    },\n                    callback: function(response) {\n                        if (response.message && response.message.file_url) {\n                            let file_url = response.message.file_url;\n\n                            // If the URL is relative, adjust to the full URL\n                            if (file_url.startsWith('./')) {\n                                file_url = window.location.origin + file_url.replace('./', '/');\n                            }\n\n                            // Trigger file download\n                            let link = document.createElement('a');\n                            link.href = file_url;\n                            link.download = 'Check_In_Report.xls';  // Set the download filename\n                            link.click();\n\n                            frappe.msgprint({\n                                title: __('Success'),\n                                indicator: 'green',\n                                message: __('Check-in report generated and downloaded.')\n                            });\n                        } else {\n                            frappe.msgprint({\n                                title: __('Error'),\n                                indicator: 'red',\n                                message: __('An error occurred while generating the report.')\n                            });\n                            console.error('Error in generating the report:', response.message || 'Unknown error');\n                        }\n                    },\n                    error: function(error) {\n                        frappe.msgprint({\n                            title: __('Error'),\n                            indicator: 'red',\n                            message: __('Server error occurred while generating the report.')\n                        });\n                        console.error('Server error:', error);\n                    }\n                });\n\n                dialog.hide();\n            } catch (e) {\n                frappe.msgprint({\n                    title: __('Error'),\n                    indicator: 'red',\n                    message: __('An unexpected error occurred.')\n                });\n                console.error('Unexpected error:', e);\n            }\n        }\n    });\n\n    dialog.show();\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Shift Type",
  "enabled": 1,
  "modified": "2024-10-11 10:32:57.644464",
  "module": "sil",
  "name": "Export Sales Invoice Report",
  "script": "frappe.ui.form.on('Shift Type', {\n    refresh: function(frm) {\n        frm.add_custom_button(__('Download Sales Invoice Report'), function() {\n            open_download_dialog(frm);\n        });\n    }\n});\n\nfunction open_download_dialog(frm) {\n    const dialog = new frappe.ui.Dialog({\n        title: __('Download Sales Invoice Report'),\n        fields: [\n            {\n                fieldtype: 'Section Break',\n                label: __('Manager Filters'),\n            },\n            {\n                fieldtype: 'Link',\n                fieldname: 'custom_zonal_manager',\n                label: __('Zonal Manager'),\n                options: 'Zonal Manager',\n                reqd: 0,\n                columns: 2,\n                description: __('(Select the Zonal Manager for the report.)')\n            },\n            {\n                fieldtype: 'Link',\n                fieldname: 'custom_regional_manager',\n                label: __('Regional Manager'),\n                options: 'Regional Manager',\n                reqd: 0,\n                columns: 2,\n                description: __('(Select the Regional Manager for the report.)')\n            },\n            {\n                fieldtype: 'Column Break' // Start a new column\n            },\n            {\n                fieldtype: 'Link',\n                fieldname: 'custom_cluster',\n                label: __('Cluster'),\n                options: 'Cluster',\n                reqd: 0,\n                description: __('(Select the Cluster for the report.)')\n            },\n            {\n                fieldtype: 'Link',\n                fieldname: 'custom_cluster_manager',\n                label: __('Cluster Manager'),\n                options: 'Cluster Manager',\n                reqd: 0,\n                description: __('Select the Cluster Manager for the report.')\n            },\n            \n            {\n                fieldtype: 'Section Break',\n                label: __('Customer Filter'),\n            },\n            {\n                fieldtype: 'Column Break' // Start a new column\n            },\n            {\n                fieldtype: 'Link',\n                fieldname: 'customer_name',\n                label: __('Customer Name'),\n                options: 'Customer',\n                reqd: 0,\n                description: __('Select the Customer for the report.')\n            },\n            \n            {\n                fieldtype: 'Section Break',\n                label: __('Date Filters'),\n            },\n            {\n                fieldtype: 'Column Break' // Start a new column for date filters\n            },\n            {\n                fieldtype: 'Date',\n                fieldname: 'starting_posting_date',\n                label: __('From Date'),\n                reqd: 1,\n                default: frappe.datetime.get_today(),\n                description: __('Select the start date for the report.')\n            },\n            {\n                fieldtype: 'Column Break' // End the first date column and start the second\n            },\n            {\n                fieldtype: 'Date',\n                fieldname: 'ending_posting_date',\n                label: __('To Date'),\n                reqd: 1,\n                default: frappe.datetime.get_today(),\n                description: __('Select the end date for the report.')\n            }\n        ],\n        primary_action_label: __('Download'),\n        primary_action(values) {\n            // Validate dates\n            if (values.starting_posting_date > values.ending_posting_date) {\n                frappe.msgprint(__('Error: From Date cannot be later than To Date.'));\n                return;\n            }\n\n            // Call the server-side function to generate and download the report\n            frappe.call({\n                method: 'sil.services.sales_invoice_report_api.generate_and_download_sales_invoice_report',\n                args: {\n                    filters: {\n                        custom_zonal_manager: values.custom_zonal_manager,\n                        custom_regional_manager: values.custom_regional_manager,\n                        custom_cluster: values.custom_cluster,\n                        custom_cluster_manager: values.custom_cluster_manager,\n                        customer_name: values.customer_name,\n                        starting_posting_date: values.starting_posting_date,\n                        ending_posting_date: values.ending_posting_date\n                    }\n                },\n                callback: function(response) {\n                    if (response.message && response.message.file_url) {\n                        // Create an invisible anchor element\n                        const link = document.createElement('a');\n                        link.href = response.message.file_url;\n                        link.download = response.message.file_name || 'sales_invoice_report.xlsx'; // Default file name if not provided\n                        // document.body.appendChild(link);\n                        link.click(); // Programmatically click the link to trigger the download\n                        // document.body.removeChild(link); // Remove the link from the document\n                    } else {\n                        frappe.msgprint(__('Error: {0}', [response.message.error || 'Unknown error']));\n                    }\n                },\n                error: function(err) {\n                    frappe.msgprint(__('An unexpected error occurred. Please try again.'));\n                    console.error(err);\n                }\n            });\n            dialog.hide();\n        }\n    });\n\n    dialog.show();\n}\n",
  "view": "Form"
 }
]