[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Attendance",
  "enabled": 1,
  "modified": "2024-12-06 10:36:24.468087",
  "module": "sil",
  "name": "Export Employee Attendance",
  "script": "frappe.listview_settings['Attendance'] = {\n    onload: function(listview) {\n        // Add a custom button to the Attendance list view toolbar\n        listview.page.add_inner_button(__('Export Check-in Report'), function() {\n            open_filter_dialog();\n        });\n    }\n};\n\nfunction open_filter_dialog() {\n    // Create a dialog with employee, from date, and to date fields\n    let dialog = new frappe.ui.Dialog({\n        title: 'Filter for Check-in Report',\n        fields: [\n            {\n                label: 'All Employees',\n                fieldname: 'all_employees',\n                fieldtype: 'Check',\n                default: 0,  // Default to unchecked\n                reqd: 0  // Optional\n            },\n            {\n                label: 'Employee',\n                fieldname: 'employee',\n                fieldtype: 'Link',\n                options: 'Employee',\n                reqd: 0,  // Optional\n                depends_on: 'eval:!doc.all_employees',\n                mandatory_depends_on: 'eval:!doc.all_employees'\n            },\n            {\n                fieldtype: 'Column Break'\n            },\n            {\n                label: 'From Date',\n                fieldname: 'from_date',\n                fieldtype: 'Date',\n                default: frappe.datetime.get_today(),\n                columns: 2,\n                reqd: 1  // Required field\n            },\n            {\n                label: 'To Date',\n                fieldname: 'to_date',\n                fieldtype: 'Date',\n                default: frappe.datetime.get_today(),\n                columns: 2,\n                reqd: 1  // Required field\n            }\n        ],\n        primary_action_label: 'Generate Report',\n        primary_action(values) {\n            // Ensure valid input\n            if (!values.from_date || !values.to_date) {\n                frappe.msgprint(__('Please fill all required fields.'));\n                return;\n            }\n\n            if (values.to_date < values.from_date) {\n                frappe.msgprint(__('To Date cannot be earlier than From Date.'));\n                return;\n            }\n\n            if (values.all_employees) {\n                values.employee = '';  // Clear employee if all employees are selected\n            }\n\n            // Show a progress dialog\n            let progress_dialog = frappe.msgprint({\n                message: __('Generating report, please wait...'),\n                indicator: 'blue',\n                title: __('Processing')\n            });\n\n            // Call the server-side function to generate the report\n            frappe.call({\n                method: 'sil.services.checkin_report_api.get_combined_checkin_report_to_hr',\n                args: {\n                    employee_name: values.employee || '',\n                    from_date: values.from_date,\n                    to_date: values.to_date\n                },\n                callback: function(response) {\n                    // Hide the progress dialog\n                    progress_dialog.hide();\n\n                    if (response.message && response.message.file_url) {\n                        // Hide the progress dialog in case of an error\n                        progress_dialog.hide();\n                        \n                        const fileUrl = response.message.file_url;\n                        const link = document.createElement('a');\n                        link.href = fileUrl;\n                        link.download = response.message.file_name || 'Checkin_Report.xlsx';\n                        link.click();\n\n                        frappe.msgprint({\n                            title: __('Success'),\n                            indicator: 'green',\n                            message: __('Check-in report successfully downloaded.')\n                        });\n                        progress_dialog.hide();\n                    } else {\n                        // Hide the progress dialog in case of an error\n                        progress_dialog.hide();\n                        frappe.msgprint({\n                            title: __('Error'),\n                            indicator: 'red',\n                            message: __('Error: {0}', [response.message.error || 'Unknown error'])\n                        });\n                        progress_dialog.hide();\n                    }\n                },\n                error: function(error) {\n                    // Hide the progress dialog in case of an error\n                    progress_dialog.hide();\n\n                    frappe.msgprint({\n                        title: __('Error'),\n                        indicator: 'red',\n                        message: __('Server error occurred while generating the report.')\n                    });\n                    console.error('Server error:', error);\n                }\n            });\n\n            dialog.hide();  // Hide the filter dialog\n        }\n    });\n\n    dialog.show();  // Show the filter dialog\n}\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 0,
  "modified": "2024-12-17 12:39:34.254594",
  "module": "sil",
  "name": "Export Sales Invoice Reports",
  "script": "frappe.listview_settings['Sales Invoice'] = {\n    onload: function(listview) {\n        listview.page.add_inner_button(__('Export Report'), function() {\n            open_download_dialog();\n        });\n    }\n};\n\nfunction open_download_dialog() {\n    const dialog = new frappe.ui.Dialog({\n        title: __('Download Sales Invoice Report'),\n        width: '800px',\n        height: '300px',\n        fields: [\n            {\n                fieldtype: 'Section Break',\n                label: __('Date Filters'),\n            },\n            {\n                fieldtype: 'Column Break'\n            },\n            {\n                fieldtype: 'Date',\n                fieldname: 'starting_posting_date',\n                label: __('From Date'),\n                reqd: 1,\n                default: frappe.datetime.get_today(),\n                columns: 3,\n                description: __('Select the start date for the report.')\n            },\n            {\n                fieldtype: 'Date',\n                fieldname: 'ending_posting_date',\n                label: __('To Date'),\n                reqd: 1,\n                default: frappe.datetime.get_today(),\n                columns: 3,\n                description: __('Select the end date for the report.')\n            },\n            {\n                fieldtype: 'Column Break'\n            },\n            {\n                fieldtype: 'Link',\n                fieldname: 'customer_name',\n                label: __('Customer Name'),\n                options: 'Customer',\n                reqd: 0,\n                columns: 3,\n                description: __('Select the Customer for the report.')\n            },\n            {\n                fieldtype: 'Section Break',\n                label: __('Manager Filters'),\n            },\n            {\n                fieldtype: 'Select',\n                fieldname: 'custom_zonal_manager',\n                label: __('Zonal Manager'),\n                options: [],\n                reqd: 0,\n                columns: 1,\n                description: __('(Select the Zonal Manager for the report.)')\n            },\n            {\n                fieldtype: 'Select',\n                fieldname: 'custom_regional_manager',\n                label: __('Regional Manager'),\n                options: [],\n                reqd: 0,\n                columns: 1,\n                description: __('(Select the Regional Manager for the report.)')\n            },\n            {\n                fieldtype: 'Column Break'\n            },\n            {\n                fieldtype: 'Select',\n                fieldname: 'custom_cluster',\n                label: __('Cluster'),\n                options: [],\n                reqd: 0,\n                columns: 1,\n                description: __('(Select the Cluster for the report.)')\n            },\n            {\n                fieldtype: 'Select',\n                fieldname: 'custom_cluster_manager',\n                label: __('Cluster Manager'),\n                options: [],\n                reqd: 0,\n                columns: 1,\n                description: __('Select the Cluster Manager for the report.')\n            }\n        ],\n        primary_action_label: __('Download'),\n        primary_action(values) {\n            if (values.starting_posting_date > values.ending_posting_date) {\n                frappe.msgprint(__('Error: From Date cannot be later than To Date.'));\n                return;\n            }\n\n            frappe.call({\n                method: 'sil.services.sales_invoice_report_api.generate_and_download_sales_invoice_report',\n                args: {\n                    filters: values\n                },\n                callback: function(response) {\n                    if (response.message && response.message.file_url) {\n                        const link = document.createElement('a');\n                        link.href = response.message.file_url;\n                        link.download = response.message.file_name || 'sales_invoice_report.xlsx';\n                        link.click();\n                    } else {\n                        frappe.msgprint(__('Error: {0}', [response.message.error || 'Unknown error']));\n                    }\n                },\n                error: function(err) {\n                    frappe.msgprint(__('An unexpected error occurred. Please try again.'));\n                    console.error(err);\n                }\n            });\n\n            dialog.hide();\n        }\n    });\n\n    // Fetch filter data from the server\n    frappe.call({\n        method: 'sil.services.sales_invoice_api.get_distinct_sales_invoice_filters',\n        callback: function(response) {\n            const data = response.message || [];\n            \n            // Populate options dynamically\n            dialog.set_df_property('custom_zonal_manager', 'options', [''].concat([...new Set(data.map(item => item.custom_zonal_manager))]));\n            dialog.set_df_property('custom_regional_manager', 'options', [''].concat([...new Set(data.map(item => item.custom_regional_manager))]));\n            dialog.set_df_property('custom_cluster', 'options', [''].concat([...new Set(data.map(item => item.custom_cluster))]));\n            dialog.set_df_property('custom_cluster_manager', 'options', [''].concat([...new Set(data.map(item => item.custom_cluster_manager))]));\n            \n            dialog.refresh();\n        }\n    });\n\n    dialog.show();\n}\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2024-10-25 10:17:08.775479",
  "module": "sil",
  "name": "Sales Order Item Filter",
  "script": "frappe.ui.form.on('Sales Order', {\r\n    custom_sales_type : function(frm) {\r\n        frm.fields_dict.items.grid.get_field('item_code').get_query = function(doc, cdt, cdn) {\r\n            let row = locals[cdt][cdn];\r\n            let filters = {};\r\n\r\n            if (frm.doc.custom_sales_type === \"B2C PRODUCT INDIA\" || frm.doc.custom_sales_type === \"B2B PRODUCT INDIA\") {\r\n                filters = {\r\n                    \"custom_item_classification\": [\"in\", [\"Finished Software\", \"Finished Products\",\"Miscellaneous\",\"Both Sales and Spare\"]]\r\n                };\r\n            } else if (frm.doc.custom_sales_type === \"B2C SPARES INDIA\" || frm.doc.custom_sales_type === \"B2B SPARES INDIA\") {\r\n                filters = {\r\n                    \"custom_item_classification\": [\"in\", [\"Raw Materials and Spares\",\"License\",\"Miscellaneous\",\"Both Sales and Spare\"]]\r\n                };\r\n            } else if (frm.doc.custom_sales_type === \"B2C AMC INDIA\" || frm.doc.custom_sales_type === \"B2B AMC INDIA\") {\r\n                filters = {\r\n                    \"custom_item_classification\": \"Annual Maintenance\"\r\n                };\r\n            } else {\r\n                filters = {\r\n                    \"custom_item_classification\": [\"in\", [\"Annual Maintenance\", \"Miscellaneous\",\"Both Sales and Spare\",\"Raw Materials and Spares\", \"Finished Software\", \"Finished Products\"]]\r\n                };\r\n            }\r\n\r\n            return {\r\n                filters: filters\r\n            };\r\n        };\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-10-25 10:16:57.401483",
  "module": "sil",
  "name": "Sales Invoice Item Filter",
  "script": "frappe.ui.form.on('Sales Invoice', {\r\n    custom_sales_type : function(frm) {\r\n        frm.fields_dict.items.grid.get_field('item_code').get_query = function(doc, cdt, cdn) {\r\n            let row = locals[cdt][cdn];\r\n            let filters = {};\r\n\r\n            if (frm.doc.custom_sales_type === \"B2C PRODUCT INDIA\" || frm.doc.custom_sales_type === \"B2B PRODUCT INDIA\") {\r\n                filters = {\r\n                    \"custom_item_classification\": [\"in\", [\"Finished Software\", \"Finished Products\",\"Both Sales and Spare\",\"Miscellaneous\"]]\r\n                };\r\n            } else if (frm.doc.custom_sales_type === \"B2C SPARES INDIA\" || frm.doc.custom_sales_type === \"B2B SPARES INDIA\") {\r\n                filters = {\r\n                    \"custom_item_classification\": [\"in\", [\"Raw Materials and Spares\",\"Both Sales and Spare\",\"Miscellaneous\",\"License\"]]\r\n                };\r\n            } else if (frm.doc.custom_sales_type === \"B2C AMC INDIA\" || frm.doc.custom_sales_type === \"B2B AMC INDIA\") {\r\n                filters = {\r\n                    \"custom_item_classification\": \"Annual Maintenance\"\r\n                };\r\n            } else {\r\n                filters = {\r\n                    \"custom_item_classification\": [\"in\", [\"Annual Maintenance\", \"Miscellaneous\",\"Both Sales and Spare\", \"Raw Materials and Spares\", \"Finished Software\", \"Finished Products\"]]\r\n                };\r\n            }\r\n\r\n            return {\r\n                filters: filters\r\n            };\r\n        };\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2024-08-12 11:19:15.526107",
  "module": "sil",
  "name": "Cluster Filter With State SO",
  "script": "frappe.ui.form.on('Sales Order', {\n    custom_state: function(frm) {\n    frm.set_query(\"custom_cluster\", function() {\n            return {\n                \"filters\": {\n                    \"stateprovince\": frm.doc.custom_state,\n                   \n                }\n            };\n        });\n    },\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 0,
  "modified": "2024-08-12 11:19:59.654482",
  "module": "sil",
  "name": "Cluster Filter With State SI",
  "script": "frappe.ui.form.on('Sales Invoice', {\n    custom_state_province: function(frm) {\n        // Define a function to set the query filter\n        function updateCustomClusterQuery(custom_clusters) {\n            frm.set_query(\"custom_cluster\", function() {\n                return {\n                    filters: custom_clusters.length > 0 \n                        ? [[\"name\", \"in\", custom_clusters]]\n                        : [\"name\", \"in\",frm.doc.custom_state_province ]  \n                };\n            });\n            frm.refresh_field(\"custom_cluster\");  \n        }\n\n        if (frm.doc.custom_state_province) {\n            console.log(\"State/Province Selected: \", frm.doc.custom_state_province);\n\n            frappe.call({\n                method: \"sil.services.cluster_api.get_custom_clusters\",\n                args: {\n                    state_province: frm.doc.custom_state_province\n                },\n                callback: function(r) {\n                    console.log(\"API Response: \", r);\n\n                    if (r.message && r.message.length > 0) {\n                        var custom_clusters = r.message.map(item => item.parent);\n                        console.log(\"Custom Clusters: \", custom_clusters);\n                        updateCustomClusterQuery(custom_clusters);  \n                    } else {\n                        console.log(\"No clusters found.\");\n                        updateCustomClusterQuery([frm.doc.custom_state_province]);  // Clear the filter\n                    }\n                },\n                error: function(err) {\n                    console.error(\"API Call Error: \", err);\n                    updateCustomClusterQuery([frm.doc.custom_state_province]);  // Clear the filter on error\n                }\n            });\n        } else {\n            // If no state/province is selected, clear the filter\n            updateCustomClusterQuery([frm.doc.custom_state_province]);\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-10-25 10:18:40.388334",
  "module": "sil",
  "name": "Sales Invoice Sales Type Filter",
  "script": "frappe.ui.form.on('Sales Invoice', {\r\n    billing_address_gstin: function(frm) {\r\n        if (frm.doc.billing_address_gstin) {\r\n            frm.set_df_property('custom_sales_type', 'options', [\r\n                'B2B PRODUCT INDIA',\r\n                'B2B SPARES INDIA',\r\n                'B2B CONSUMABLES INDIA',\r\n                'B2B AMC INDIA',\r\n                'SALES INTERNATIONAL',\r\n                'AMAZON SALES',\r\n                'B2B DELHI OFC'\r\n            ]);\r\n        } else {\r\n            frm.set_df_property('custom_sales_type', 'options', [\r\n                'B2C PRODUCT INDIA',\r\n                'B2C SPARES INDIA',\r\n                'B2C CONSUMABLES INDIA',\r\n                'SALES INTERNATIONAL',\r\n                'B2C AMC INDIA',\r\n                'B2C DELHI OFC'\r\n            ]);\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2024-10-25 10:18:10.305330",
  "module": "sil",
  "name": "Sales Order Sales Type filter",
  "script": "frappe.ui.form.on('Sales Order', {\r\n    billing_address_gstin: function(frm) {\r\n        if (frm.doc.billing_address_gstin) {\r\n            frm.set_df_property('custom_sales_type', 'options', [\r\n                'B2B PRODUCT INDIA',\r\n                'B2B SPARES INDIA',\r\n                'B2B CONSUMABLES INDIA',\r\n                'B2B AMC INDIA',\r\n                'SALES INTERNATIONAL',\r\n                'AMAZON SALES',\r\n                'B2B DELHI OFC'\r\n            ]);\r\n        } else {\r\n            frm.set_df_property('custom_sales_type', 'options', [\r\n                'B2C PRODUCT INDIA',\r\n                'B2C SPARES INDIA',\r\n                'B2C CONSUMABLES INDIA',\r\n                'B2C AMC INDIA',\r\n                'B2C DELHI OFC'\r\n            ]);\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2024-09-26 10:37:08.251192",
  "module": "sil",
  "name": "Sales order Button Click",
  "script": "frappe.ui.form.on('Sales Order', {\r\n    custom_create_serial_no: function(frm) {\r\n        customCreateSerialNo(frm);\r\n    }\r\n});\r\n\r\nfunction customCreateSerialNo(frm) {\r\n    let items_series_data = {};\r\n\r\n    // Gathering data from custom item series\r\n    frm.doc.custom_item_series.forEach(function(item_series, index) {\r\n        items_series_data[index] = {\r\n            \"customer\": frm.doc.customer,\r\n            \"sales_order_name\": frm.doc.name,\r\n            \"item_name\":item_series.item_name,\r\n            \"item_code\": item_series.item_code,\r\n            \"item_family\": item_series.item_family,\r\n            \"quantity\": item_series.quantity,\r\n            \"item_series\": item_series.item_series,\r\n            \"serial_nos\": item_series.serial_no || \"\"\r\n        };\r\n    });\r\n\r\n    // Show progress dialog\r\n    let progress_dialog = frappe.msgprint({\r\n        message: __('Processing items...'),\r\n        indicator: 'blue',\r\n        title: __('Please Wait'),\r\n        wide: true,\r\n        buttons: []\r\n    });\r\n\r\n    let total_items = Object.keys(items_series_data).length;\r\n    let processed_items = 0;\r\n\r\n    // Iterate over item series data and call method to create serial numbers\r\n    Object.keys(items_series_data).forEach(function(key) {\r\n        let item_series = items_series_data[key];\r\n        \r\n        frappe.call({\r\n            method: \"sil.services.sales_order_api.generateSerialNo\", // Replace with your method path\r\n            args: {\r\n                items_series: JSON.stringify({ [key]: item_series }), // Passing data as JSON\r\n                form_doc: frm.doc.name // Send form doc if necessary\r\n            },\r\n            callback: function(response) {\r\n                console.log('Response received:', response);\r\n\r\n                // Check for success response\r\n                if (response.message && response.message.success) {\r\n                    // Access serial numbers using the key\r\n                    let serial_data = response.message.serial_nos[key]; \r\n                    if (serial_data) {\r\n                        let item = frm.doc.custom_item_series.find(i => i.item_code === item_series.item_code);\r\n                        if (item) {\r\n                            // Update the 'serial_no' field with the serial_Nos from the response\r\n                            frappe.model.set_value(item.doctype, item.name, 'serial_no', serial_data.serial_Nos);\r\n                            console.log('Serial Nos updated for item:', item_series.item_code, 'Serial Nos:', serial_data.serial_Nos);\r\n                        }\r\n                    }\r\n                    frappe.msgprint(\"Serial No created successfully for item: \" + item_series.item_code);\r\n                } else {\r\n                    frappe.msgprint(\"Serial No creation failed for item: \" + item_series.item_code + \" - \" + (response.message.message || 'Unknown error'));\r\n                }\r\n\r\n                frm.refresh_field('custom_item_series');\r\n\r\n                // Track processed items\r\n                processed_items += 1;\r\n\r\n                // Hide progress dialog when all items are processed\r\n                if (processed_items === total_items) {\r\n                    progress_dialog.hide();\r\n                }\r\n            },\r\n            error: function(error) {\r\n                console.error('Error processing item:', item_series.item_code, 'Error:', error);\r\n                processed_items += 1;\r\n                frappe.msgprint(\"Error processing item: \" + item_series.item_code);\r\n\r\n                if (processed_items === total_items) {\r\n                    progress_dialog.hide();\r\n                }\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Cluster Manager",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.753122",
  "module": "sil",
  "name": "Cluster Managers filter",
  "script": "frappe.ui.form.on('Cluster Managers', {\n    refresh: function(frm) {\n        frm.set_query(\"parent_cluster\", function() {\n            return {\n                \"filters\": {\n                    \"workflow_state\": \"Approved\"  // Filters parent clusters with status 'Submitted'\n                }\n            };\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.731470",
  "module": "sil",
  "name": "Invoice Billing Series Name",
  "script": "frappe.ui.form.on('Sales Invoice', {\n     refresh: function(frm) {\n        frm.trigger('update_naming_series');\n    },\n    custom_sales_type: function(frm) {\n        frm.trigger('update_naming_series');\n    },\n    update_naming_series: function(frm) {\n        if (frm.doc.custom_sales_type === \"B2B PRODUCT INDIA\") {\n            frm.set_value('naming_series', \"SI24B25/I./\");\n        } else if (frm.doc.custom_sales_type === \"B2C PRODUCT INDIA\") {\n            frm.set_value('naming_series', \"SI24C25/I./\");\n        } else if (frm.doc.custom_sales_type === \"B2B CONSUMABLES INDIA\") {\n            frm.set_value('naming_series', \"SI24B25/C./\");\n        } else if (frm.doc.custom_sales_type === \"B2C CONSUMABLES INDIA\") {\n            frm.set_value('naming_series', \"SI24C25/C./\");\n        } else if (frm.doc.custom_sales_type === \"B2B SPARES INDIA\") {\n            frm.set_value('naming_series', \"SI24B25/S./\");\n        } else if (frm.doc.custom_sales_type === \"B2C SPARES INDIA\") {\n            frm.set_value('naming_series', \"SI24C25/S./\");\n        } else if (frm.doc.custom_sales_type === \"B2B AMC INDIA\") {\n            frm.set_value('naming_series', \"SI24B25/A./\");\n        } else if (frm.doc.custom_sales_type === \"B2C AMC INDIA\") {\n            frm.set_value('naming_series', \"SI24C25/A./\");\n        } else if (frm.doc.custom_sales_type === \"SALES INTERNATIONAL\") {\n            frm.set_value('naming_series', \"SI24I25/F./\");\n\t\t} else if (frm.doc.custom_sales_type === \"AMAZON SALES\") {\n            frm.set_value('naming_series', \"IN.-.###./.24-25\");\n\t\t} else if (frm.doc.custom_sales_type === \"B2B DELHI OFC\") {\n            frm.set_value('naming_series', \"SID24B25/I./\");\n        } else if (frm.doc.custom_sales_type === \"B2C DELHI OFC\") {\n            frm.set_value('naming_series', \"SID24C25/I./\");\n        } else {\n            frm.set_value('naming_series', \"\");\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.709936",
  "module": "sil",
  "name": "Salesorder Billing series",
  "script": "frappe.ui.form.on('Sales Order', {\n    custom_sales_type: function(frm) {\n        // Update the naming_series field based on custom_sales_type field\n        if (frm.doc.custom_sales_type === \"B2B PRODUCT INDIA\") {\n            frm.set_value('naming_series', \"SO24B25/I./\");\n        } else if (frm.doc.custom_sales_type === \"B2C PRODUCT INDIA\") {\n            frm.set_value('naming_series', \"SO24C25/I./\");\n        } else if (frm.doc.custom_sales_type === \"B2B CONSUMABLES INDIA\") {\n            frm.set_value('naming_series', \"SO24B25/C./\");\n        } else if (frm.doc.custom_sales_type === \"B2C CONSUMABLES INDIA\") {\n            frm.set_value('naming_series', \"SO24C25/C./\");\n        } else if (frm.doc.custom_sales_type === \"B2B SPARES INDIA\") {\n            frm.set_value('naming_series', \"SO24B25/S./\");\n        } else if (frm.doc.custom_sales_type === \"B2C SPARES INDIA\") {\n            frm.set_value('naming_series', \"SO24C25/S./\");\n        } else if (frm.doc.custom_sales_type === \"B2B AMC INDIA\") {\n            frm.set_value('naming_series', \"SO24B25/A./\");\n        } else if (frm.doc.custom_sales_type === \"B2C AMC INDIA\") {\n            frm.set_value('naming_series', \"SO24C25/A./\");\n        } else if (frm.doc.custom_sales_type === \"SALES INTERNATIONAL\") {\n            frm.set_value('naming_series', \"SO24I25/F./\");\n        }  else if (frm.doc.custom_sales_type === \"AMAZON SALES\") {\n            frm.set_value('naming_series', \"INSO-.FY./\");\n\t\t} else if (frm.doc.custom_sales_type === \"B2B DELHI OFC\") {\n            frm.set_value('naming_series', \"SOD24B25/I./\");\n        } else if (frm.doc.custom_sales_type === \"B2C DELHI OFC\") {\n            frm.set_value('naming_series', \"SOD24C25/I./\");\n        } else {\n            frm.set_value('naming_series', \"\");\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Issue",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.690094",
  "module": "sil",
  "name": "Filter Employes",
  "script": "frappe.ui.form.on('Issue', {\n    custom_item_classification: function(frm) {\n\tif (frm.doc.custom_item_classification == \"Finished Software\")\n        frm.set_query(\"custom_attended_by_\", function() {\n            return {\n                \"filters\": {\n                    \"department\": \"Projects And Technical Solutions - SIL\",                    \n                }\n            };\n        });\n    },\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.314574",
  "module": "sil",
  "name": "Sales Table Series No",
  "script": "frappe.ui.form.on('Sales Order', {\n        refresh: function(frm) {\n            if (frm.doc.custom_approval_status === \"Customer Support Approved\") {\n                if (frm.doc.custom_validation_check != 1) {\n                    \n                    frm.set_value(\"custom_validation_check\", 1);\n    \n                    frm.doc.items.forEach(function(row) {\n                        let item_series = frm.add_child('custom_item_series');\n                        item_series.item_code = row.item_code;\n                        item_series.item_name = row.item_name;\n                        item_series.item_family = row.custom_item_family;\n                        item_series.quantity = row.qty;\n                    });\n                    \n                    frm.refresh_field('custom_item_series');\n                }\n            }\n        }\n    });\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Issue",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.664270",
  "module": "sil",
  "name": "Item filter with the help of item classification",
  "script": "frappe.ui.form.on('Issue', {\n    custom_item_group: function(frm) {\n        frm.set_query(\"custom_items\", function() {\n            return {\n                \"filters\": {\n                    \"item_group\": frm.doc.custom_item_group,\n                    \"custom_item_classification\": frm.doc.custom_item_classification\n                }\n            };\n        });\n    },\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.641871",
  "module": "sil",
  "name": "Sales order Committed Date",
  "script": "frappe.ui.form.on('Sales Invoice', {\n    posting_date(frm) {\n        frm.set_value(\"custom_expiry_date\", frappe.datetime.add_days(frm.doc.transaction_date, 365));\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Issue Type",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.616006",
  "module": "sil",
  "name": "Item load with help of Item group",
  "script": "frappe.ui.form.on('Issue Type', {\n    custom_item_group: function(frm) {\n        frm.set_query(\"custom_item\", function() {\n            return {\n                \"filters\": {\n                    \"item_group\": frm.doc.custom_item_group\n                }\n            };\n        });\n    },\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2024-08-12 11:22:21.681774",
  "module": "sil",
  "name": "Ware house sales order",
  "script": "frappe.ui.form.on('Sales Order', {\nrefresh(frm) {\n    frappe.ui.keys.add_shortcut({\n        shortcut: 'f2',\n        action: async () => {\n            try {\n                const itemResponse = await frappe.call({\n                    method: 'frappe.client.get_list',\n                    args: {\n                        doctype: 'Item',\n                        fields: ['name', 'item_code', 'item_name', 'item_group', 'stock_uom', 'description', 'last_purchase_rate']\n                    }\n                });\n\n                if (itemResponse && itemResponse.message && itemResponse.message.length > 0) {\n                    const itemDetails = itemResponse.message;\n                    const d = new frappe.ui.Dialog({\n                        title: __('Item Details'),\n                        size: 'large'\n                    });\n\n                    let itemInfoHtml = `\n                        <div class=\"modal-body\">\n                            <table class=\"table table-bordered\">\n                                <thead>\n                                    <tr>\n                                        <th>Item Code</th>\n                                        <th>Item Name</th>\n                                        <th>Item Group</th>\n                                        <th>Stock UOM</th>\n                                        <th>Description</th>\n                                        <th>Last Purchase Rate</th>\n                                        <th>Warehouse</th>\n                                        <th>Stock Quantity</th>\n                                    </tr>\n                                </thead>\n                                <tbody>`;\n\n                    // Loop through each item\n                    for (const item of itemDetails) {\n                        const binResponse = await frappe.call({\n                            method: 'frappe.client.get_list',\n                            args: {\n                                doctype: 'Bin',\n                                filters: { item_code: item.item_code },\n                                fields: ['warehouse', 'actual_qty']\n                            }\n                        });\n\n                        let warehouseHtml = '';\n                        let stockQtyHtml = '';\n\n                        if (binResponse && binResponse.message && binResponse.message.length > 0) {\n                            const binDetails = binResponse.message;\n                            binDetails.forEach(bin => {\n                                warehouseHtml += `${bin.warehouse}<br>`;\n                                stockQtyHtml += `${bin.actual_qty}<br>`;\n                            });\n                        } else {\n                            warehouseHtml = 'N/A';\n                            stockQtyHtml = 'N/A';\n                        }\n\n                        itemInfoHtml += `\n                            <tr>\n                                <td>${item.item_code}</td>\n                                <td>${item.item_name}</td>\n                                <td>${item.item_group}</td>\n                                <td>${item.stock_uom}</td>\n                                <td>${item.description}</td>\n                                <td>${item.last_purchase_rate}</td>\n                                <td>${warehouseHtml}</td>\n                                <td>${stockQtyHtml}</td>\n                            </tr>`;\n                    }\n\n                    itemInfoHtml += `\n                                </tbody>\n                            </table>\n                        </div>`;\n\n                    $(itemInfoHtml).appendTo(d.body);\n                    d.show();\n                } else {\n                    frappe.msgprint('No item details found.');\n                }\n            } catch (err) {\n                console.error('Error fetching data:', err);\n                frappe.msgprint('Error fetching item details. Please try again.');\n            }\n        },\n        page: this.page,\n        description: __('Get Item Details'),\n        ignore_inputs: true\n    });\n} });",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2024-08-12 11:16:33.818142",
  "module": "sil",
  "name": "Sales order Net total",
  "script": "frappe.ui.form.on('Sales Order', {\n      before_save: function (frm) {\n        frm.set_value(\"custom_net_totals\", frm.doc.net_total);\n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2024-08-12 11:36:22.842987",
  "module": "sil",
  "name": "Sales order Rounded total",
  "script": "frappe.ui.form.on('Sales Order', {\n\tbefore_save: function (frm) {\n        frm.set_value(\"custom_rounded_total\", frm.doc.rounded_total);\n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2024-08-12 11:37:57.983612",
  "module": "sil",
  "name": "Sales order 3 field populate",
  "script": "frappe.ui.form.on('Sales Order', {\n    before_save: function (frm) {\n        frm.set_value(\"custom_total_qty\", frm.doc.total_qty);\n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.487081",
  "module": "sil",
  "name": "Confirmation msg for workflow",
  "script": "frappe.ui.form.on('Sales Order', {\n    before_workflow_action: async (frm) => {\n        let promise = new Promise((resolve, reject) => {\n         frappe.dom.unfreeze()\n            frappe.confirm(\n                \"<b>Are you sure you want to proceed?</b><ul>\",\n                () => resolve(), // User confirms\n                () => reject()   // User rejects\n            );\n        });\n        await promise.catch(() => frappe.throw()); // If the promise is rejected, throw an error\n    },\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.464910",
  "module": "sil",
  "name": "Sales order gst",
  "script": "frappe.ui.form.on('Sales Order', {\n    custom_gst_category: function(frm) {\n        // Update custom_sales_type field options based on custom_gst_category value\n        if (frm.doc.custom_customer_location_type == \"India\") {\n            if (frm.doc.custom_gst_category == \"Registered Composition\" ||\n                frm.doc.custom_gst_category == \"Registered Regular\") {\n                frm.fields_dict['custom_sales_type'].set_input(\"B2B AMC INDIA\\nB2B SPARES INDIA\\nB2B CONSUMABLES INDIA\\nB2B PRODUCT INDIA\");\n            } else if (frm.doc.custom_gst_category == \"Unregistered\") {\n                frm.fields_dict['custom_sales_type'].set_input(\"B2C AMC INDIA\\nB2C SPARES INDIA\\nB2C CONSUMABLES INDIA\\nB2C PRODUCT INDIA\");\n            }\n        } else if (frm.doc.custom_customer_location_type == \"International\") {\n            frm.fields_dict['custom_sales_type'].set_input(\"SALES INTERNATIONAL\");\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "General Messages",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.437605",
  "module": "sil",
  "name": "General Messages",
  "script": "frappe.ui.form.on('General Messages', {\n    hr: function(frm) {\n        if (cur_frm.doc.hr == 1) {\n            cur_frm.set_value(\"role1\", \"HR User\");\n        }\n    },\n\n    reporting_authority: function(frm) {\n        if (cur_frm.doc.reporting_authority == 1) {\n            cur_frm.set_value(\"role1\", \"Reporting Authority\");\n        }\n    },\n    \n    after_save: function(frm) {\n        if(cur_frm.doc.reporting_authority == 1 && cur_frm.doc.hr == 1){\n              cur_frm.set_value(\"role1\", \"Bothpermission\");\n        }\n        \n    }\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leave Application",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.412712",
  "module": "sil",
  "name": "Leave application Popup",
  "script": "frappe.ui.form.on('Leave Application', {\n\tafter_save(frm) {\n\talert(__(\"Submit to confirm Actions->Submit\"));\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.359818",
  "module": "sil",
  "name": "Changes in Tally updated",
  "script": "frappe.ui.form.on('Sales Invoice', {\n    refresh: function(frm) {\n        if (frm.doc.status == 'Cancelled') {\n            if (frm.doc.custom_is_updated == 0) {\n                frm.doc.custom_is_updated = 1;\n                frm.doc.is_tallyupdated = 0;\n                frm.save();\n            }\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2024-08-12 10:41:54.391895",
  "module": "sil",
  "name": "Add custom Button",
  "script": "frappe.ui.form.on('Sales Invoice', {\n    refresh: function(frm) {\n        frm.add_custom_button(__('Issue'), function(){\n            new frappe.ui.form.MultiSelectDialog({\n                doctype: \"Issue\",\n                target: frm,\n                setters: {},\n                get_query() {\n                    return {\n                        filters: { status: 'Closed' }\n                    }\n                },\n                action(selections) {\n                    if (selections && selections.length > 0) {\n                       $.each(selections, function (i, custom_item) {\n                           console.log(custom_item);\n                           frappe.db.get_list('Issue', {\n                                fields: ['customer','custom_item.itemss','custom_item.qty'],\n                                filters: {\"name\": custom_item}\n                            }).then(records => {\n                                console.log(records);\n                                frm.set_value(\"customer\", records[0].customer);\n                                frm.clear_table(\"items\");\n\t\t\t\t\t\t\t\t\t// frm.add_child(\"items\",{\n\t\t\t\t\t\t\t\t//   item_code: records[0].itemss,\n\t\t\t\t\t\t\t\t//   qty:records[0].qty\n\t\t\t\t\t\t\t\t// });\n                                let row = frm.add_child(\"items\");\n                                frappe.model.set_value(row.doctype, row.name, \"item_code\", records[0].itemss);\n                                frappe.model.set_value(row.doctype, row.name, \"qty\", records[0].qty);\n                                frm.refresh_field(\"items\");\n                            }).catch(err => {\n                                console.error(err);\n                            });\n                        });\n                        $(\".modal\").modal(\"hide\");\n                    }\n                }\n            });\n        }, __(\"Get Items From\"));\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 0,
  "modified": "2024-08-12 11:29:37.981786",
  "module": "sil",
  "name": "Cluster Filter Sales Invoice",
  "script": "frappe.ui.form.on('Sales Invoice', {\n    custom_state: function(frm) {\n        // Define a function to set the query filter\n        function updateCustomClusterQuery(custom_clusters) {\n            frm.set_query(\"custom_cluster\", function() {\n                return {\n                    filters: custom_clusters.length > 0 \n                        ? [[\"name\", \"in\", custom_clusters]]\n                        : [\"name\", \"in\",frm.doc.custom_state ]  \n                };\n            });\n            frm.refresh_field(\"custom_cluster\");  \n        }\n\n        if (frm.doc.custom_state) {\n            console.log(\"State/Province Selected: \", frm.doc.custom_state);\n\n            frappe.call({\n                method: \"erpnext.stock.doctype.item.api.get_custom_clusters\",\n                args: {\n                    state_province: frm.doc.custom_state\n                },\n                callback: function(r) {\n                    console.log(\"API Response: \", r);\n\n                    if (r.message && r.message.length > 0) {\n                        var custom_clusters = r.message.map(item => item.parent);\n                        console.log(\"Custom Clusters: \", custom_clusters);\n                        updateCustomClusterQuery(custom_clusters);  \n                    } else {\n                        console.log(\"No clusters found.\");\n                        updateCustomClusterQuery([frm.doc.custom_state]);  // Clear the filter\n                    }\n                },\n                error: function(err) {\n                    console.error(\"API Call Error: \", err);\n                    updateCustomClusterQuery([frm.doc.custom_state]);  // Clear the filter on error\n                }\n            });\n        } else {\n            // If no state/province is selected, clear the filter\n            updateCustomClusterQuery([frm.doc.custom_state]);\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2024-08-12 11:30:13.991019",
  "module": "sil",
  "name": "Cluster Filter in Sales Order",
  "script": "frappe.ui.form.on('Sales Order', {\n    custom_state: function(frm) {\n        // Define a function to set the query filter\n        function updateCustomClusterQuery(custom_clusters) {\n            frm.set_query(\"custom_cluster\", function() {\n                return {\n                    filters: custom_clusters.length > 0 \n                        ? [[\"name\", \"in\", custom_clusters]]\n                        : [\"name\", \"in\",frm.doc.custom_state ]  \n                };\n            });\n            frm.refresh_field(\"custom_cluster\");  \n        }\n\n        if (frm.doc.custom_state) {\n            console.log(\"State/Province Selected: \", frm.doc.custom_state);\n\n            frappe.call({\n                method: \"erpnext.stock.doctype.item.api.get_custom_clusters\",\n                args: {\n                    state_province: frm.doc.custom_state\n                },\n                callback: function(r) {\n                    console.log(\"API Response: \", r);\n\n                    if (r.message && r.message.length > 0) {\n                        var custom_clusters = r.message.map(item => item.parent);\n                        console.log(\"Custom Clusters: \", custom_clusters);\n                        updateCustomClusterQuery(custom_clusters);  \n                    } else {\n                        console.log(\"No clusters found.\");\n                        updateCustomClusterQuery([frm.doc.custom_state]);  // Clear the filter\n                    }\n                },\n                error: function(err) {\n                    console.error(\"API Call Error: \", err);\n                    updateCustomClusterQuery([frm.doc.custom_state]);  // Clear the filter on error\n                }\n            });\n        } else {\n            // If no state/province is selected, clear the filter\n            updateCustomClusterQuery([frm.doc.custom_state]);\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Shift Type",
  "enabled": 1,
  "modified": "2024-10-11 10:24:52.255216",
  "module": "sil",
  "name": "Weekly Checkin Report",
  "script": "frappe.ui.form.on('Shift Type', {\n    refresh: function(frm) {\n        // Add a custom button to open the filter dialog\n        frm.add_custom_button(__('Generate Check-in Report'), function() {\n            open_filter_dialog(frm);\n        });\n    }\n});\n\nfunction open_filter_dialog(frm) {\n    // Create a dialog with employee, from date, and to date fields\n    let dialog = new frappe.ui.Dialog({\n        title: 'Filter for Check-in Report',\n        fields: [\n            {\n                label: 'Employee',\n                fieldname: 'employee',\n                fieldtype: 'Link',\n                options: 'Employee',\n                reqd: 0  // Optional\n            },\n            {\n                label: 'From Date',\n                fieldname: 'from_date',\n                fieldtype: 'Date',\n                default: frappe.datetime.get_today(),\n                columns: 2,\n                reqd: 1  // Required field\n            },\n             {\n                fieldtype: 'Column Break' // Start a new column\n            },\n            {\n                label: 'To Date',\n                fieldname: 'to_date',\n                fieldtype: 'Date',\n                default: frappe.datetime.get_today(),\n                columns: 2,\n                reqd: 1  // Required field\n            }\n        ],\n        primary_action_label: 'Generate Report',\n        primary_action(values) {\n            try {\n                // Ensure valid input\n                if (!values.from_date || !values.to_date) {\n                    frappe.msgprint(__('Please fill all required fields.'));\n                    return;\n                }\n\n                // Validate that the 'to_date' is not earlier than 'from_date'\n                if (values.to_date < values.from_date) {\n                    frappe.msgprint(__('To Date cannot be earlier than From Date.'));\n                    return;\n                }\n\n                // Call the server-side function to generate the report\n                frappe.call({\n                    method: 'sil.services.checkin_report_api.get_combined_checkin_report_to_hr',\n                    args: {\n                        employee_name: values.employee || '', // Use empty string if no employee selected\n                        from_date: values.from_date,\n                        to_date: values.to_date\n                    },\n                    callback: function(response) {\n                        if (response.message && response.message.file_url) {\n                            let file_url = response.message.file_url;\n\n                            // If the URL is relative, adjust to the full URL\n                            if (file_url.startsWith('./')) {\n                                file_url = window.location.origin + file_url.replace('./', '/');\n                            }\n\n                            // Trigger file download\n                            let link = document.createElement('a');\n                            link.href = file_url;\n                            link.download = 'Check_In_Report.xls';  // Set the download filename\n                            link.click();\n\n                            frappe.msgprint({\n                                title: __('Success'),\n                                indicator: 'green',\n                                message: __('Check-in report generated and downloaded.')\n                            });\n                        } else {\n                            frappe.msgprint({\n                                title: __('Error'),\n                                indicator: 'red',\n                                message: __('An error occurred while generating the report.')\n                            });\n                            console.error('Error in generating the report:', response.message || 'Unknown error');\n                        }\n                    },\n                    error: function(error) {\n                        frappe.msgprint({\n                            title: __('Error'),\n                            indicator: 'red',\n                            message: __('Server error occurred while generating the report.')\n                        });\n                        console.error('Server error:', error);\n                    }\n                });\n\n                dialog.hide();\n            } catch (e) {\n                frappe.msgprint({\n                    title: __('Error'),\n                    indicator: 'red',\n                    message: __('An unexpected error occurred.')\n                });\n                console.error('Unexpected error:', e);\n            }\n        }\n    });\n\n    dialog.show();\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Shift Type",
  "enabled": 1,
  "modified": "2024-10-11 10:32:57.644464",
  "module": "sil",
  "name": "Export Sales Invoice Report",
  "script": "frappe.ui.form.on('Shift Type', {\n    refresh: function(frm) {\n        frm.add_custom_button(__('Download Sales Invoice Report'), function() {\n            open_download_dialog(frm);\n        });\n    }\n});\n\nfunction open_download_dialog(frm) {\n    const dialog = new frappe.ui.Dialog({\n        title: __('Download Sales Invoice Report'),\n        fields: [\n            {\n                fieldtype: 'Section Break',\n                label: __('Manager Filters'),\n            },\n            {\n                fieldtype: 'Link',\n                fieldname: 'custom_zonal_manager',\n                label: __('Zonal Manager'),\n                options: 'Zonal Manager',\n                reqd: 0,\n                columns: 2,\n                description: __('(Select the Zonal Manager for the report.)')\n            },\n            {\n                fieldtype: 'Link',\n                fieldname: 'custom_regional_manager',\n                label: __('Regional Manager'),\n                options: 'Regional Manager',\n                reqd: 0,\n                columns: 2,\n                description: __('(Select the Regional Manager for the report.)')\n            },\n            {\n                fieldtype: 'Column Break' // Start a new column\n            },\n            {\n                fieldtype: 'Link',\n                fieldname: 'custom_cluster',\n                label: __('Cluster'),\n                options: 'Cluster',\n                reqd: 0,\n                description: __('(Select the Cluster for the report.)')\n            },\n            {\n                fieldtype: 'Link',\n                fieldname: 'custom_cluster_manager',\n                label: __('Cluster Manager'),\n                options: 'Cluster Manager',\n                reqd: 0,\n                description: __('Select the Cluster Manager for the report.')\n            },\n            \n            {\n                fieldtype: 'Section Break',\n                label: __('Customer Filter'),\n            },\n            {\n                fieldtype: 'Column Break' // Start a new column\n            },\n            {\n                fieldtype: 'Link',\n                fieldname: 'customer_name',\n                label: __('Customer Name'),\n                options: 'Customer',\n                reqd: 0,\n                description: __('Select the Customer for the report.')\n            },\n            \n            {\n                fieldtype: 'Section Break',\n                label: __('Date Filters'),\n            },\n            {\n                fieldtype: 'Column Break' // Start a new column for date filters\n            },\n            {\n                fieldtype: 'Date',\n                fieldname: 'starting_posting_date',\n                label: __('From Date'),\n                reqd: 1,\n                default: frappe.datetime.get_today(),\n                description: __('Select the start date for the report.')\n            },\n            {\n                fieldtype: 'Column Break' // End the first date column and start the second\n            },\n            {\n                fieldtype: 'Date',\n                fieldname: 'ending_posting_date',\n                label: __('To Date'),\n                reqd: 1,\n                default: frappe.datetime.get_today(),\n                description: __('Select the end date for the report.')\n            }\n        ],\n        primary_action_label: __('Download'),\n        primary_action(values) {\n            // Validate dates\n            if (values.starting_posting_date > values.ending_posting_date) {\n                frappe.msgprint(__('Error: From Date cannot be later than To Date.'));\n                return;\n            }\n\n            // Call the server-side function to generate and download the report\n            frappe.call({\n                method: 'sil.services.sales_invoice_report_api.generate_and_download_sales_invoice_report',\n                args: {\n                    filters: {\n                        custom_zonal_manager: values.custom_zonal_manager,\n                        custom_regional_manager: values.custom_regional_manager,\n                        custom_cluster: values.custom_cluster,\n                        custom_cluster_manager: values.custom_cluster_manager,\n                        customer_name: values.customer_name,\n                        starting_posting_date: values.starting_posting_date,\n                        ending_posting_date: values.ending_posting_date\n                    }\n                },\n                callback: function(response) {\n                    if (response.message && response.message.file_url) {\n                        // Create an invisible anchor element\n                        const link = document.createElement('a');\n                        link.href = response.message.file_url;\n                        link.download = response.message.file_name || 'sales_invoice_report.xlsx'; // Default file name if not provided\n                        // document.body.appendChild(link);\n                        link.click(); // Programmatically click the link to trigger the download\n                        // document.body.removeChild(link); // Remove the link from the document\n                    } else {\n                        frappe.msgprint(__('Error: {0}', [response.message.error || 'Unknown error']));\n                    }\n                },\n                error: function(err) {\n                    frappe.msgprint(__('An unexpected error occurred. Please try again.'));\n                    console.error(err);\n                }\n            });\n            dialog.hide();\n        }\n    });\n\n    dialog.show();\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Intimation",
  "enabled": 1,
  "modified": "2024-12-20 14:30:59.741939",
  "module": "sil",
  "name": "Populate Receipt Entries",
  "script": "frappe.ui.form.on('Payment Intimation', {\n    onload: function(frm) {\n        console.log(\"Form loaded\");\n    },\n    amount: function(frm) {\n        update_unallocated_amount(frm);\n    },\n    validate: function(frm) {\n        check_for_duplicate_entries(frm); // Call the function to validate duplicate entries\n    }\n    \n});\n\nfrappe.ui.form.on('Receipt', {\n    customer: function(frm, cdt, cdn) {\n        checkAndCallServer(frm, cdt, cdn);\n    },\n    \n    amount: function(frm, cdt, cdn) {\n        checkAndCallServer(frm, cdt, cdn);\n    },\n\n    reference_type: function(frm, cdt, cdn) {\n        checkAndCallServer(frm, cdt, cdn);\n        \n    },\n\n    reference_name: function(frm, cdt, cdn) {\n        checkAndCallServer(frm, cdt, cdn);\n    },\n\n    allocated_amount: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        if (row.reference_type === 'Sales Invoice' || row.reference_type === 'Sales Order') {\n            if (row.customer && row.reference_type && row.reference_name && row.outstanding_amount) {\n                update_parent_field(frm, cdt, cdn);\n            }\n        } else if (row.reference_type === 'Slip No') {\n            if (row.customer && row.reference_type) {\n                update_parent_field(frm, cdt, cdn);\n            }\n        }\n        update_unallocated_amount(frm); // Update unallocated amount when allocated amount changes\n    },\n\n  /* outstanding_amount: function(frm, cdt, cdn) {\n        let child_doc = locals[cdt][cdn];\n\n        // Check if the status is \"Pending\" or any other condition\n        if (child_doc.reference_type == \"Advance\") {\n            // Disable the field 'field_name' if status is 'Pending'\n            frm.fields_dict['receipt_entry'].grid.grid_rows_by_docname[cdn].toggle_editable('outstanding_amount', false);\n        } else {\n            // Enable the field 'field_name' if the status is not 'Pending'\n            frm.fields_dict['receipt_entry'].grid.grid_rows_by_docname[cdn].toggle_editable('outstanding_amount', true);\n        }\n        frm.refresh_field('outstanding_amount');\n    }*/\n});\n\n\n// Function to check for duplicate entries in the child table\nfunction check_for_duplicate_entries(frm) {\n    let seen_entries = new Set();\n    let is_duplicate_found = false;\n\n    frm.doc.receipt_entry.forEach(function(row) {\n        let key = `${row.customer || ''}-${row.reference_type || ''}-${row.reference_name || ''}`;\n        if (seen_entries.has(key)) {\n            is_duplicate_found = true;\n            frappe.msgprint({\n                title: __('Duplicate Entry'),\n                message: __('Duplicate entry found for Customer: {0}, Reference Type: {1}, Reference Name: {2}', \n                    [row.customer, row.reference_type, row.reference_name]),\n                indicator: 'red'\n            });\n            frappe.validated = false; // Prevent saving the form\n        }\n        seen_entries.add(key);\n    });\n\n    if (is_duplicate_found) {\n        frappe.throw(__('Please remove duplicate entries in the child table.'));\n    }\n}\n\n\nfunction checkAndCallServer(frm, cdt, cdn) {\n    let row = locals[cdt][cdn];\n    let amount = frm.doc.amount || 0;\n    let unallocated_amount = frm.doc.unallocated_amount || 0;\n\n    if (amount > 0) {\n        if (row.customer && row.reference_type && !row.reference_name) {\n            frappe.call({\n                method: 'sil.services.receipt_information_api.get_all_receipt_info_by_reference_type_and_cust_name',\n                args: {\n                    customer: row.customer,\n                    reference_type: row.reference_type\n                },\n                callback: function(r) {\n                    if (r.message) {\n                        let total_allocated_amount = 0.0;\n                        if (Array.isArray(r.message.reference_name)) {\n                            const referenceNames = r.message.reference_name.map(item => item.name);\n                            frm.fields_dict[\"receipt_entry\"].grid.grid_rows_by_docname[cdn]\n                                .get_field('reference_name').df.options = referenceNames;\n                            frm.fields_dict[\"receipt_entry\"].grid.grid_rows_by_docname[cdn]\n                                .refresh_field('reference_name');\n                        }\n                        frappe.model.set_value(cdt, cdn, 'outstanding_amount', r.message.outstanding_amount);\n                        frm.doc.receipt_entry.forEach(function(row) {\n                            if (row.reference_type === 'Sales Invoice' || row.reference_type === 'Sales Order') {\n                                if (parseFloat(row.allocated_amount || 0.0) > parseFloat(row.outstanding_amount || 0.0)) {\n                                    frappe.msgprint(__('The allocated amount ({0}) cannot exceed the outstanding amount ({1}).',\n                                        [parseFloat(row.allocated_amount || 0.0), parseFloat(row.outstanding_amount || 0.0)]));\n                                    frappe.model.set_value(cdt, cdn, 'allocated_amount', parseFloat(row.outstanding_amount || 0.0));\n                                    is_valid = false;\n                                    frappe.validated = false;\n                                    return false;\n                                }\n                            }\n                            total_allocated_amount += parseFloat(row.allocated_amount || 0.0);\n                        });\n                        if((amount-total_allocated_amount)>=parseFloat(r.message.outstanding_amount))\n                        {\n                            frappe.model.set_value(cdt, cdn, 'allocated_amount', r.message.outstanding_amount);\n                        }\n                        else\n                        {\n                            frappe.model.set_value(cdt, cdn, 'allocated_amount', r.message.allocated_amount);\n                        }\n                    }\n                }\n            });\n        } else if (row.customer && row.reference_type && row.reference_name) {\n            frappe.call({\n                method: 'sil.services.receipt_information_api.get_all_receipt_info_by_reference_name',\n                args: {\n                    customer: row.customer,\n                    reference_type: row.reference_type,\n                    reference_name: row.reference_name\n                },\n                callback: function(r) {\n                    if (r.message) {\n                         let total_allocated_amount = 0.0;\n                         if (Array.isArray(r.message.reference_name)) {\n                            const referenceNames = r.message.reference_name.map(item => item.name);\n                            frm.fields_dict[\"receipt_entry\"].grid.grid_rows_by_docname[cdn]\n                                .get_field('reference_name').df.options = referenceNames;\n                            frm.fields_dict[\"receipt_entry\"].grid.grid_rows_by_docname[cdn]\n                                .refresh_field('reference_name');\n                        }\n                        check_for_duplicate_entries(frm); \n                        \n                        frappe.model.set_value(cdt, cdn, 'outstanding_amount', r.message.outstanding_amount);\n                        // Disable editing the field\n                        frm.fields_dict['outstanding_amount'].get_input().setAttribute('readonly', true);\n                        frappe.ui.form.set_df_property('outstanding_amount', 'read_only', 1); // Ensure the field is read-only\n                        // Refresh the field to ensure the changes are applied\n                        frm.refresh_field('outstanding_amount');\n                        \n                        \n                        frm.doc.receipt_entry.forEach(function(row) {\n                            if (row.reference_type === 'Sales Invoice' || row.reference_type === 'Sales Order') {\n                                if (parseFloat(row.allocated_amount || 0.0) > parseFloat(row.outstanding_amount || 0.0)) {\n                                    frappe.msgprint(__('The allocated amount ({0}) cannot exceed the outstanding amount ({1}).',\n                                        [parseFloat(row.allocated_amount || 0.0), parseFloat(row.outstanding_amount || 0.0)]));\n                                    frappe.model.set_value(cdt, cdn, 'allocated_amount', parseFloat(row.outstanding_amount || 0.0));\n                                    is_valid = false;\n                                    frappe.validated = false;\n                                    return false;\n                                }\n                            }\n                            total_allocated_amount += parseFloat(row.allocated_amount || 0.0);\n                        });\n                        if((amount-total_allocated_amount)>=parseFloat(r.message.outstanding_amount))\n                        {\n                            frappe.model.set_value(cdt, cdn, 'allocated_amount', r.message.outstanding_amount);\n                        }\n                        else\n                        {\n                            frappe.model.set_value(cdt, cdn, 'allocated_amount', r.message.allocated_amount);\n                        }\n                    }\n                }\n            });\n        }\n    } else {\n        frappe.msgprint(__('Please enter amount.'));\n    }\n}\n\nfunction update_parent_field(frm, cdt, cdn) {\n    let total_allocated_amount = 0.0;\n    let is_valid = true;\n\n    frm.doc.receipt_entry.forEach(function(row) {\n        // Disable editing the field\n        frm.fields_dict['outstanding_amount'].get_input().setAttribute('readonly', true);\n        frappe.ui.form.set_df_property('outstanding_amount', 'read_only', 1); // Ensure the field is read-only\n        // Refresh the field to ensure the changes are applied\n        frm.refresh_field('outstanding_amount');\n        \n        if (row.reference_type === 'Sales Invoice' || row.reference_type === 'Sales Order') {\n            frappe.ui.form.set_df_property('allocated_amount', 'read_only', 1);\n            if (parseFloat(row.allocated_amount || 0.0) > parseFloat(row.outstanding_amount || 0.0)) {\n                frappe.msgprint(__('The allocated amount ({0}) cannot exceed the outstanding amount ({1}).',\n                    [parseFloat(row.allocated_amount || 0.0), parseFloat(row.outstanding_amount || 0.0)]));\n                frappe.model.set_value(cdt, cdn, 'allocated_amount', parseFloat(row.outstanding_amount || 0.0));\n                is_valid = false;\n                frappe.validated = false;\n                return false;\n            }\n        }\n       \n        total_allocated_amount += parseFloat(row.allocated_amount || 0.0);\n    });\n\n    if (!is_valid) return;\n\n    update_unallocated_amount(frm);\n}\n\nfunction update_unallocated_amount(frm) {\n    let total_allocated_amount = 0.0;\n\n    frm.doc.receipt_entry.forEach(function(row) {\n        total_allocated_amount += parseFloat(row.allocated_amount || 0.0);\n    });\n\n    let unallocated_amount = parseFloat(frm.doc.amount || 0) - total_allocated_amount;\n    frm.set_value('unallocated_amount', unallocated_amount);\n    frm.set_value('custom_status', \"Draft\");\n\n    if (total_allocated_amount > parseFloat(frm.doc.amount || 0)) {\n        frappe.msgprint(__('The sum of allocated amounts exceeds the total amount.'));\n        frappe.validated = false;\n    }\n}\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Receipt",
  "enabled": 1,
  "modified": "2024-12-23 15:21:06.207020",
  "module": "sil",
  "name": "Populate SIL Payment Entry",
  "script": "frappe.ui.form.on('Payment Receipt', {\n    refresh: function (frm) {\n        \n        frm.set_df_property('customer_name', 'hidden', 1);\n        frm.set_df_property('receipt_number', 'hidden', 1);\n        frm.add_custom_button(__('Get Receipt Information'), function () {\n            try {\n                open_filter_dialog(frm);\n            } catch (error) {\n                console.error('Error in refresh function:', error);\n                frappe.msgprint(__('An unexpected error occurred while opening the filter dialog.'));\n            }\n        });\n    },\n    payment_type:function(frm){\n      \n        toggleFieldsVisibility(frm);\n    }\n    ,\n    validate: function (frm) {\n    frm.refresh_field('payment_entry_details');\n        \n    }\n});\n\nfunction open_filter_dialog(frm) {\n    let selectedReceipts = [];\n    const dialog = new frappe.ui.Dialog({\n        title: __('Select Executive and Receipt'),\n        size: \"large\",  // Dialog size set to large\n\n        fields: [\n            { \n                label: 'All', \n                fieldname: 'all', \n                fieldtype: 'Check', \n                default: 1, \n                onchange: handleAllSelection \n            },\n              {\n                fieldtype: 'Column Break'\n            },\n            { \n                label: 'Received By Executive', \n                fieldname: 'executive', \n                fieldtype: 'Select', \n                hidden: 1, \n                options: [],\n                onchange: handleSelection\n            },  \n              {\n                fieldtype: 'Column Break'\n            },            \n            { \n                label: 'Deposit By Customer', \n                fieldname: 'customer', \n                fieldtype: 'Select', \n                hidden: 0, \n                options: [],\n                onchange: handleSelection\n            },\n             \n             {\n                fieldtype: 'Column Break'\n            },\n            { \n                label: 'Deposit Date', \n                fieldname: 'date', \n                fieldtype: 'Select', \n                options: [],\n                onchange: handleSelection\n            },\n             {\n                fieldtype: 'Column Break'\n            },\n            { \n                label: 'Payment Mode', \n                fieldname: 'payment_mode', \n                fieldtype: 'Select', \n                options: [],\n                onchange: handleSelection \n            },\n             {\n                fieldtype: 'Column Break'\n            },\n            { \n                label: 'Amount', \n                fieldname: 'amount', \n                fieldtype: 'Select', \n                options: [],\n                onchange: handleSelection\n            },\n             {\n                  label: 'Receipt Entries', \n                fieldtype: 'Section Break'\n            },\n            { \n                label: 'Receipts', \n                fieldname: 'receipts_table', \n                fieldtype: 'HTML' \n            },\n             {\n                fieldtype: 'Section Break'\n            },  \n            \n            {\n            fieldtype: 'HTML',\n            fieldname: 'button_container',\n            options: `\n                <div class=\"custom-button-container\">\n                    <button class=\"btn btn-primary custom-get-button\">Get Receipt Details</button>\n                    <button class=\"btn btn-primary custom-approve-button\">Move to Journal</button>\n                    <button class=\"btn btn-primary custom-reject-button\">Reject</button>                     \n                    <button class=\"btn btn-primary custom-suspense-button\">View Suspense Details</button>                     \n\n                    \n                </div>\n            `\n             }\n        ],\n        \n    });\n    \n    \n    $(document).on('click', '.custom-approve-button', function () {\n        //open_remark_dialog('Move To Journal');\n        moveToJournal(frm,dialog,selectedReceipts.join(', '));\n        dialog.hide();\n    });\n    \n    $(document).on('click', '.custom-reject-button', function () {\n            open_remark_dialog('Reject Receipt Info');\n            dialog.hide();\n    });\n    $(document).on('click', '.custom-get-button', function () {\n        // const selectedReceipts = []; // Logic to fetch selected receipts\n        handleGetAction(dialog, frm, selectedReceipts.join(', '));\n    });\n    $(document).on('click', '.custom-suspense-button', function () {\n        // const selectedReceipts = []; // Logic to fetch selected receipts\n        open_suspense_dialog();\n    }); \n            \n\n     function fetch_filter_options(dialog) {\n                            frappe.call({\n                                method: 'sil.services.receipt_information_api.get_filter_options',\n                                args: {\n                                    all: dialog.get_value('all') ? 1 : 0,\n                                    executive: dialog.get_value('executive') || '',\n                                    deposit_date: dialog.get_value('date') || '',\n                                    payment_mode: dialog.get_value('payment_mode') || '',\n                                    customer: dialog.get_value('customer') || '',\n                                    deposit_amount: dialog.get_value('amount') || 0\n                                },\n                                callback: function (r) {\n                                    if (r.message) {\n                                        const { executives, dates, amounts, payment_mode, customer } = r.message;\n                    \n                                        dialog.set_df_property('executive', 'options', executives);\n                                        dialog.set_df_property('date', 'options', dates);\n                                        dialog.set_df_property('amount', 'options', amounts);\n                                        dialog.set_df_property('payment_mode', 'options', payment_mode);\n                                        dialog.set_df_property('customer', 'options', customer);\n                                    } else {\n                                        frappe.msgprint(__('No data available for filtering.'));\n                                    }\n                                },\n                                error: function (err) {\n                                    console.error('Error fetching filter options:', err);\n                                    // frappe.msgprint(__('An error occurred while fetching filter options.'));\n                                }\n                            });\n                        }\n                        \n    \n    function handleAllSelection() {\n        try {\n            const isAllChecked = dialog.get_value('all');\n            dialog.set_df_property('executive', 'hidden', isAllChecked);\n            selectedReceipts = [];\n            fetch_filter_options(dialog);\n            fetch_receipt_numbers(frm, isAllChecked ? 'All' : dialog.get_value('executive'), dialog, selectedReceipts);\n        } catch (error) {\n            console.error('Error in handleAllSelection:', error);\n            frappe.msgprint(__('An error occurred while handling the \"All\" selection.'));\n        }\n    }\n    \n      function handleSelection() {\n        try {\n            const isAllChecked = dialog.get_value('all');\n            dialog.set_df_property('executive', 'hidden', isAllChecked);\n            selectedReceipts = [];\n            fetch_receipt_numbers(frm, isAllChecked ? 'All' : dialog.get_value('executive'), dialog, selectedReceipts);\n        } catch (error) {\n            console.error('Error in handleAllSelection:', error);\n            frappe.msgprint(__('An error occurred while handling the \"All\" selection.'));\n        }\n    }\n\n    function fetch_receipt_numbers(frm, executive, dialog, selectedReceipts) {\n        const isAllChecked = dialog.get_value('all');\n        dialog.set_df_property('executive', 'hidden', isAllChecked);\n            \n        frappe.call({\n            method: 'sil.services.receipt_information_api.getAllReceiptInfoDetailsByExecutive',\n            args: {\n               executive: executive || '',\n                date: dialog.get_value('date') || '',\n                amount: dialog.get_value('amount') || 0,\n                mode_of_payment: dialog.get_value('payment_mode') || '',\n                deposited_by: dialog.get_value('customer') || ''\n            },\n            callback: function (r) {\n                try {\n                    if (r.message && r.message.length) {\n                        updateDialogOptions(r.message, dialog, selectedReceipts);\n                    } else {\n                        frappe.msgprint(__('No receipts found for the selected filters.'));\n                    }\n                } catch (error) {\n                    console.error('Error in callback of fetch_receipt_numbers:', error);\n                }\n            },\n            error: function (err) {\n                console.error('Error fetching receipt numbers:', err);\n                frappe.msgprint(__('An error occurred while fetching receipt numbers.'));\n            }\n        });\n    }\n\n    function updateDialogOptions(receipts, dialog, selectedReceipts) {\n        try {\n            const receiptOptions = receipts.map(receipt => {\n                // Use default values if any field is missing\n                const receiptNumber = receipt.name || 'N/A';\n                const customer = receipt.custom_customer || receipt.executive;\n                const executive = receipt.executive || 'N/A';\n                const date = receipt.date || 'N/A';\n                const amount = receipt.amount || 'N/A';\n                const modeOfPayment = receipt.mode_of_payment || 'N/A';\n                const referenceNumber = receipt.chequereference_number || 'N/A';\n                const referenceDate = receipt.reference_no || 'N/A';\n\n                return `\n                    <tr>\n                        <td style=\"text-align: center;\"><input type=\"checkbox\" class=\"receipt-table1\" value=\"${receiptNumber}\"></td>\n                        <td class=\"receipt-number\">${receiptNumber}</td>\n                        <td>${customer}</td>\n                        <td>${executive}</td>\n                        <td>${date}</td>\n                        <td>${amount}</td>\n                        <td>${modeOfPayment}</td>\n                        <td>${referenceNumber}</td>\n                        <td>${referenceDate}</td>\n                       \n                    </tr>\n                `;\n            }).join('');\n\nconst tableHTML = `\n <div class=\"table-wrapper\">\n    <table class=\"table table-bordered\" style=\"border-radius: 8px; overflow: hidden; border-collapse: separate; border-spacing: 0;\">\n        <thead>\n            <tr>\n                <th style=\"white-space: nowrap;background-color: #9e9e9d; color: white;\" class=\"receipt-table1\">Select</th>\n                <th style=\"white-space: nowrap;background-color: #9e9e9d; color: white;\">Receipt Number</th>\n                <th style=\"white-space: nowrap;background-color: #9e9e9d; color: white;\">Deposited By</th>\n                <th style=\"white-space: nowrap;background-color: #9e9e9d; color: white;\">Received By</th>\n                <th style=\"white-space: nowrap;background-color: #9e9e9d; color: white;\">Deposit Date</th>\n                <th style=\"white-space: nowrap;background-color: #9e9e9d; color: white;\">Receipt Amount</th>\n                <th style=\"white-space: nowrap;background-color: #9e9e9d; color: white;\">Payment Mode</th>\n                <th style=\"white-space: nowrap;background-color: #9e9e9d; color: white;\">Transaction Reference/Cheque Number</th>\n                <th style=\"white-space: nowrap;background-color: #9e9e9d; color: white;\">Transaction Reference/Cheque Date</th>\n                \n            </tr>\n        </thead>\n        <tbody>${receiptOptions}</tbody>\n        </table>\n        </div>`;\n\nconst wrapper = dialog.fields_dict.receipts_table.$wrapper;\nwrapper.html(tableHTML);\nwrapper.css({\n    maxHeight: '30vh', // Set max height as a percentage of viewport height\n    overflowY: 'auto', // Enable vertical scrolling\n    overflowX: 'auto', // Enable horizontal scrolling\n});\n\n            // attachCheckboxHandlers(selectedReceipts);\n        } catch (error) {\n            console.error('Error in updateDialogOptions:', error);\n            frappe.msgprint(__('An error occurred while updating the receipt table.'));\n        }\n    }\n    \n    function fetch_filter_options(dialog) {\n        frappe.call({\n            method: 'sil.services.receipt_information_api.get_filter_options',\n            args: {\n                all: dialog.get_value('all') ? 1 : 0,\n                executive: dialog.get_value('executive') || '',\n                deposit_date: dialog.get_value('date') || '',\n                deposit_amount: dialog.get_value('amount') || ''\n            },\n            callback: function (r) {\n                try {\n                    if (r.message) {\n                        const { executives, dates, amounts, payment_mode, customer } = r.message;\n\n                        dialog.set_df_property('executive', 'options', executives);\n                        dialog.set_df_property('date', 'options', dates);\n                        dialog.set_df_property('amount', 'options', amounts);\n                        dialog.set_df_property('payment_mode', 'options', payment_mode);\n                        dialog.set_df_property('customer', 'options', customer);\n                    } else {\n                        frappe.msgprint(__('No data available for filtering.'));\n                    }\n                } catch (error) {\n                    console.error('Error in callback of fetch_filter_options:', error);\n                }\n            },\n            error: function (err) {\n                console.error('Error fetching filter options:', err);\n                frappe.msgprint(__('An error occurred while fetching filter options.'));\n            }\n        });\n    }\n\n        \n       // Add CSS to style the buttons at the bottom left\n$(\"<style>\")\n    .prop(\"type\", \"text/css\")\n    .html(`\n        .modal-footer {\n            justify-content: flex-start; /* Align buttons to the left */\n        }\n        .custom-bottom-button {\n            margin-right: 10px; /* Space between buttons */\n            background-color: #007bff; /* Default button color */\n            color: white;\n            border: none;\n            padding: 8px 16px;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n        .custom-bottom-button:hover {\n            background-color: #0056b3; /* Darker shade on hover */\n        }\n        .custom-bottom-left-section {\n            float: left; /* Align to the bottom-left */\n            margin-right: auto; /* Prevent overlapping with buttons */\n            padding: 8px;\n        }\n        .custom-bottom-left-section table {\n            border-collapse: collapse;\n            width: auto; /* Adjust the width to content */\n        }\n        .custom-bottom-left-section th,\n        .custom-bottom-left-section td {\n            padding: 6px 12px;\n            border: 1px solid #ddd;\n        }\n        .custom-bottom-left-section th {\n            background-color: #f4f4f4;\n        }\n        .custom-bottom-buttons {\n            display: flex;\n            gap: 8px; /* Space between buttons */\n        }\n        .custom-button {\n            padding: 8px 16px;\n            border-radius: 4px;\n            font-size: 14px;\n        }\n    `)\n    .appendTo(\"head\");\n\n    \n\n    try {\n        dialog.show();\n        addCheckboxValidation('.receipt-table1');\n        const isAllChecked = dialog.get_value('all');\n        fetch_filter_options(dialog);\n        fetch_receipt_numbers(frm, isAllChecked ? 'All' : dialog.get_value('executive'), dialog, selectedReceipts);\n    } catch (error) {\n        console.error('Error initializing the dialog:', error);\n        frappe.msgprint(__('An error occurred while initializing the dialog.'));\n    }\n\n    dialog.$wrapper.find('.modal-dialog').css({\n    'width': '90%',  // Increase the width to 90% of the viewport, for example\n    'max-width': '1500px' // Set a custom max-width to make it larger\n    });\n\n\n\n function open_remark_dialog(actionName) {\n     let remarkDialog = null\n     // Check if the dialog already exists\n    if (remarkDialog) {\n        remarkDialog.show();\n        return;\n    }\n        remarkDialog = new frappe.ui.Dialog({\n            title: `${actionName} - Add Remark`,\n            fields: [\n                {\n                    label: 'Remark',\n                    fieldname: 'remark',\n                    fieldtype: 'Small Text',\n                    placeholder: `Enter your remark for ${actionName}`\n                }\n            ],\n            primary_action_label: 'Submit',\n            primary_action: function () {\n                const remark = remarkDialog.get_value('remark');\n                rejectReceiptIntimation(frm,dialog,selectedReceipts.join(', '),remark_entry)\n                // frappe.msgprint({\n                //     title: __('Action Completed'),\n                //     message: `${actionName} action performed with remark: ${remark}`,\n                //     indicator: 'blue'\n                // });\n                remarkDialog.hide();\n            }\n        });\n\n        remarkDialog.show();\n    }\n}\nfunction open_suspense_dialog() {\n    const suspenseDialog = new frappe.ui.Dialog({\n        title: __('Suspense Details (Debitor)'),\n        size: \"large\",  // Dialog size set to small\n        fields: [\n\n            // New Text Field (replacing the existing one)\n    {\n        label: 'Receipts',\n        fieldname: 'receipts',\n        fieldtype: 'HTML',\n        options: `\n            <div style=\"display: flex; justify-content: space-between;\">\n                <!-- Suspense Details (Debitor) Section -->\n                <div style=\"width: auto; padding-right: 2%;\">\n                    <div>\n                        <table class=\"table table-bordered receipt-table\" style=\"border-radius: 8px; overflow: hidden;\">\n\n                            <thead>\n                                <tr style=\"background-color: grey; color: white;\">\n                                    <th>Receipt ID</th>\n                                    <th>Executive</th>\n                                    <th>Deposit Date</th>\n                                    <th>Payment Mode</th>\n                                    <th>Reference No</th>\n                                    <th>Reference Date</th>\n                                    <th>Amount</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <!-- Placeholder for rows, no data inserted yet -->\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        `\n    }\n        ],\n    });\n\n    // Show the dialog\n    suspenseDialog.show();\n}\n\nfunction get_receipt_information(frm, selected_receipts) {\n    frappe.call({\n        method: 'sil.services.receipt_information_api.getAllReceiptInfoDetailsByReceiptNo',\n        args: { receipt_number: selected_receipts},\n        callback: function(r) {\n           if (r.message && r.message.receipt_information && r.message.receipt_information.length) {\n                populateFormFields(frm, r.message.receipt_information);\n            }else {\n                frappe.msgprint(__('No receipt information found for the selected receipt numbers.'));\n            }\n        },\n        error: function() {\n            frappe.msgprint(__('An error occurred while fetching receipt information.'));\n        }\n    });\n}\n\n\nfunction moveToJournal(frm, dialog, selectedReceipts) {\n    if (selectedReceipts && selectedReceipts.length > 0) {\n        console.log('Selected Receipts:', selectedReceipts);\n\n        frappe.call({\n            method: 'sil.services.payment_info_journal_entry_api.MovePaymentInfoForJournalEntry',\n            args: {\n                receipt_no: selectedReceipts\n            },\n            callback: function (r) {\n                console.log('Server Response:', r);\n\n                if (r.message && r.message.status === \"success\") {\n                    frappe.msgprint({\n                        title: __('Action Completed'),\n                        message: `Successfully moved the receipt(s) [${selectedReceipts}] to journal entry.`,\n                        indicator: 'blue'\n                    });\n                    console.log(`Receipts moved to journal entry: [${selectedReceipts}]`);\n                    \n                    // Optionally refresh the dialog or perform other UI updates\n                    dialog.refresh();\n                } else if (r.message && r.message.status === \"error\") {\n                    frappe.msgprint({\n                        title: __('Action Failed'),\n                        message: `Failed to move receipt(s) [${selectedReceipts}]: ${r.message.error}`,\n                        indicator: 'red'\n                    });\n                    console.error(`Error while moving receipts: ${r.message.error}`);\n                } else {\n                    frappe.msgprint({\n                        title: __('No Action Taken'),\n                        message: __('No data was updated. Please check the receipt numbers.'),\n                        indicator: 'orange'\n                    });\n                    console.warn('No data was updated for the selected receipts.');\n                }\n            },\n            error: function (err) {\n                console.error('Error while calling the server method:', err);\n                frappe.msgprint({\n                    title: __('Server Error'),\n                    message: __('An error occurred while processing the request. Please try again later.'),\n                    indicator: 'red'\n                });\n            }\n        });\n    } else {\n        console.warn('No receipts selected by the user.');\n        frappe.msgprint({\n            title: __('No Receipt Selected'),\n            message: __('Please select at least one receipt to move to journal entry.'),\n            indicator: 'orange'\n        });\n    }\n}\n\n\n\nfunction rejectReceiptIntimation(frm, dialog, selectedReceipts, remark_entry) {\n    if (selectedReceipts && selectedReceipts.length > 0) {\n        console.log('Selected Receipts:', selectedReceipts);\n        console.log('Remark Entry:', remark_entry);\n\n        frappe.call({\n            method: 'sil.services.payment_info_journal_entry_api.UpdatePaymentInfoForRejection',\n            args: {\n                receipt_no: selectedReceipts,\n                remark: remark_entry\n            },\n            callback: function (r) {\n                console.log('Server Response:', r);\n\n                if (r.message && r.message.status === \"success\") {\n                    frappe.msgprint({\n                        title: __('Action Completed'),\n                        message: `Rejected successfully with remark: ${remark_entry}`,\n                        indicator: 'blue'\n                    });\n                    console.log(`Receipts rejected successfully: [${selectedReceipts.join(', ')}] with remark: \"${remark_entry}\"`);\n\n                    // Optionally refresh the dialog or UI elements\n                    dialog.hide();\n                    frm.refresh();\n                } else if (r.message && r.message.status === \"error\") {\n                    frappe.msgprint({\n                        title: __('Action Failed'),\n                        message: `Failed to reject receipt(s) [${selectedReceipts.join(', ')}]: ${r.message.error}`,\n                        indicator: 'red'\n                    });\n                    console.error(`Error while rejecting receipts: ${r.message.error}`);\n                } else {\n                    frappe.msgprint({\n                        title: __('No Action Taken'),\n                        message: __('No data was updated. Please check the receipt numbers.'),\n                        indicator: 'orange'\n                    });\n                    console.warn('No data was updated for the selected receipts.');\n                }\n            },\n            error: function (err) {\n                console.error('Error while calling the server method:', err);\n                frappe.msgprint({\n                    title: __('Server Error'),\n                    message: __('An error occurred while processing the request. Please try again later.'),\n                    indicator: 'red'\n                });\n            }\n        });\n    } else {\n        console.warn('No receipts selected by the user.');\n        frappe.msgprint({\n            title: __('No Receipt Selected'),\n            message: __('Please select at least one receipt to reject.'),\n            indicator: 'orange'\n        });\n    }\n}\n\n\nfunction handleGetAction(dialog, frm, selectedReceipts) {\n    try {\n        if (selectedReceipts) {\n            get_receipt_information(frm, selectedReceipts);\n        }\n\n        if (selectedReceipts.length > 0) {\n            // Unhide the 'customer' and 'receipt_number' fields only when data exists\n            frm.set_df_property('customer_name', 'hidden', 0); // Unhide customer field\n            frm.set_df_property('receipt_number', 'hidden', 0); // Unhide receipt number field\n        }\n\n        dialog.hide();\n\n        // Handle changes for filter fields to update dependent dropdowns\n        dialog.fields_dict.executive.$input.on('change', function () {\n            fetch_filter_options(dialog);\n        });\n\n        dialog.fields_dict.date.$input.on('change', function () {\n            fetch_filter_options(dialog);\n        });\n\n        dialog.fields_dict.amount.$input.on('change', function () {\n            fetch_filter_options(dialog);\n        });\n\n        dialog.fields_dict.payment_mode.$input.on('change', function () {\n            fetch_filter_options(dialog);\n        });\n\n        dialog.fields_dict.customer.$input.on('change', function () {\n            fetch_filter_options(dialog);\n        });\n\n        dialog.show();\n        fetch_filter_options(dialog);\n\n    } catch (error) {\n        console.error('Error during primary action:', error);\n    }\n}\n\nfunction addCheckboxValidation(selector) {\n    $(document).on('change', selector, function () {\n        if ($(this).is(':checked')) {\n            // Uncheck all other checkboxes in the same group\n            $(selector).not(this).prop('checked', false);\n        }\n    }); }\n\nfunction populateFormFields(frm, receipt_information) {\n    receipt_information.forEach(receipt => {\n        frm.set_value('mode_of_payment', receipt.mode_of_payment || '');\n        frm.set_value('executive', receipt.executive || '');\n        frm.set_value('bank_account', receipt.bank_account || '');\n        frm.set_value('account_paid_to', receipt.account_paid_to || '');\n        frm.set_value('receipt_number', receipt.name || '');\n        frm.set_value('customer_name', receipt.custom_customer || '');\n        frm.set_value('date', frappe.datetime.nowdate());\n        frm.set_value('amount_received', receipt.amount || 0);\n        frm.set_value('reference_number', receipt.chequereference_number || null);\n        frm.set_value('chequereference_date', receipt.reference_no || null);\n        frm.set_value('account_paid_from', receipt.account_paid_from || null);\n        frm.set_value('payment_type', \"Receive\");\n        \n        if (receipt.name) {\n            frm.set_df_property('receipt_number', 'hidden', 0); // Unhide receipt_number field if receipt.name exists\n        } else {\n            frm.set_df_property('receipt_number', 'hidden', 1); // Hide receipt_number field if no value\n        }\n\n        if (receipt.customer) {\n            frm.set_df_property('customer_name', 'hidden', 0); // Unhide customer_name field if receipt.customer exists\n        } else {\n            frm.set_df_property('customer_name', 'hidden', 1); // Hide customer_name field if no value\n        }\n        \n        if (receipt.receipt_entries) {\n            frm.clear_table('payment_entry_details');\n            \n            receipt.receipt_entries.forEach(entry => {\n                let child = frm.add_child('payment_entry_details');\n                Object.assign(child, {\n                    customer: entry.customer || '',\n                    reference_type: entry.reference_type || '',\n                    reference_name: entry.reference_name || '',\n                    outstanding_amount: entry.outstanding_amount || 0,\n                    allocated_amount: entry.allocated_amount || 0\n                });\n            });\n            frm.refresh_field('payment_entry_details');\n        }\n        frm.set_df_property('payment_entry_details', 'read_only', 1);\n      \n    });\n}\n\nfunction toggleFieldsVisibility(frm) {\n    const paymentType = frm.doc.payment_type;\n\n    // Check if payment_type is \"Internal Transfer\"\n    if (paymentType === 'Internal Transfer') {\n        frm.clear_table('payment_entry_details');\n        // Hide the receipt_number, customer_name fields, and payment_entry_details table\n        frm.set_df_property('receipt_number', 'hidden', 1);\n        frm.set_df_property('customer_name', 'hidden', 1);\n        frm.set_df_property('payment_entry_details', 'hidden', 1); // Hide payment entry details\n        frm.get_field('payment_entry_details').$wrapper.hide(); // Also hide the table visually\n        frm.add_custom_button(__('Get Receipt Information'), function () {\n            frappe.msgprint(__('Receipt information is not available for Internal Transfer.'));\n        }).prop('disabled', true); // Disable the button\n    } else {\n        // If payment_type is not \"Internal Transfer\", show the fields and button\n        frm.set_df_property('receipt_number', 'hidden', 0); // Unhide receipt_number\n        frm.set_df_property('customer_name', 'hidden', 0); // Unhide customer_name\n        frm.set_df_property('payment_entry_details', 'hidden', 0); // Unhide payment_entry_details\n        frm.get_field('payment_entry_details').$wrapper.show(); // Show the table\n        frm.add_custom_button(__('Get Receipt Information'), function () {\n            try {\n                open_filter_dialog(frm);\n            } catch (error) {\n                console.error('Error in refresh function:', error);\n                frappe.msgprint(__('An unexpected error occurred while opening the filter dialog.'));\n            }\n        }).prop('disabled', false); // Enable the button\n    }\n}\n\n// CSS to fix table layout and prevent receipt number overflow, and align Payment Mode, Deposit Date, and Amount inline\nfrappe.ui.form.on('Payment Receipt', {\n    refresh: function(frm) {\n$(\"<style>\")\n    .prop(\"type\", \"text/css\")\n    .html(`\n        /* Style the modal container */\n        .dialog {\n            border-radius: 8px;\n            overflow: hidden;\n            width: 80% !important;\n        }\n\n        /* Style the modal footer to align buttons closer */\n        .modal-footer {\n            display: flex;\n            justify-content: flex-start; /* Align buttons to the left */\n            gap: 10px; /* Add a small gap between the buttons */\n        }\n\n        /* Make the buttons appear inline with minimal spacing */\n        .modal-footer .btn {\n            margin: 0; /* Remove the default margin */\n            padding: 8px 16px; /* Ensure buttons have consistent padding */\n            display: inline-block; /* Ensure they stay in line */\n        }\n\n        /* Optional: Style the buttons for better appearance */\n        .modal-footer .btn-dark {\n            background-color: black;\n            color: white !important;\n            border: none !important;\n            border-radius: 8px;\n        }\n\n        .modal-footer .btn-dark:hover {\n            background-color: #333 !important; /* Darker shade on hover */\n        }\n\n        /* Table layout adjustments for fixed width */\n        .dialog .table {\n            table-layout: fixed !important;  /* Fixed table layout */\n            width: 100% !important;          /* Ensure table fits within dialog width */\n            overflow: hidden !important;     /* Prevent content overflow */\n            border-radius: 8px;             /* Rounded corners for table */\n        }\n\n        /* Apply border-radius to each column in the table */\n        .dialog .table th, .dialog .table td {\n            padding: 8px !important;        /* Add padding for better readability */\n            text-align: left !important;     /* Left-align the text */\n        }\n\n        /* Prevent wrapping and set max width for Receipt Number column */\n        .receipt-number {\n            white-space: nowrap !important;  /* Prevent line break */\n            overflow: hidden !important;\n            text-overflow: ellipsis;        /* Optionally add ellipsis if too long */\n            max-width: 150px;               /* Set max width for the receipt number */\n        }\n\n        /* Adjust table column widths */\n        .dialog .table th, .dialog .table td {\n            padding: 8px !important;        /* Add padding for better readability */\n            text-align: left !important;     /* Left-align the text */\n        }\n\n        /* Align Payment Mode, Deposit Date, and Amount inline */\n        .dialog .form-section {\n            display: flex;\n            flex-wrap: wrap;\n            justify-content: space-between;\n        }\n\n        .dialog .form-section .form-field {\n            margin-right: 15px;\n            margin-bottom: 10px;\n            flex: 1 1 30%; /* Allow fields to grow and fill available space, set a minimum width for each */\n        }\n\n        .dialog .form-section .form-field label {\n            white-space: nowrap;\n        }\n\n        .dialog .form-section .form-field .input-with-feedback {\n            width: 100%;\n        }\n        \n        .table-wrapper {\n            max-height: 65vh; /* Limit table height */\n            overflow-y: auto; /* Enable vertical scrolling */\n            overflow-x: auto; /* Enable horizontal scrolling */\n            white-space: nowrap; /* Prevent table cells from wrapping */\n        }\n        \n        .custom-button-container {\n            display: flex;\n            justify-content: flex-end;\n            gap: 10px; /* Space between buttons */\n            margin-top: 20px;\n        }\n        \n        .custom-button-container .btn {\n            min-width: 100px; /* Set a smaller button width */\n        }\n    `)\n    .appendTo(\"head\");\n\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Intimation",
  "enabled": 0,
  "modified": "2024-12-20 14:31:18.118363",
  "module": "sil",
  "name": "Account Paid To Filter",
  "script": "frappe.ui.form.on('Payment Intimation', {\n    mode_of_payment: function (frm) {\n        console.log('Mode of Payment changed:', frm.doc.mode_of_payment); // Log the selected value for debugging\n\n        frappe.call({\n            method: 'sil.services.payment_type_api.getAccountByPaymentType', // Replace with your server method\n            args: {\n                payment_type: frm.doc.mode_of_payment // Pass the selected mode of payment\n            },\n            callback: function (response) {\n                console.log('Server response:', response); // Log the server response for debugging\n\n                if (response.message && Array.isArray(response.message)) {\n                    try {\n                        // Extract the 'default_account' values from the response\n                        const accounts = response.message.map(item => item.name);\n                        console.log('Extracted accounts:', accounts); // Log the extracted accounts for debugging\n\n                        if (accounts.length > 0) {\n                            // Dynamically set a query for 'account_paid_to' field\n                            frm.set_query('account_paid_to', function () {\n                                return {\n                                    filters: {\n                                        name: ['in', accounts] // Restrict to the extracted accounts\n                                    }\n                                };\n                            });\n                            frm.refresh_field('account_paid_to');\n                            console.log('Query set for account_paid_to with accounts:', accounts);\n                        } else {\n                            frappe.msgprint(__('No accounts found for the selected mode of payment.'));\n                        }\n                    } catch (error) {\n                        console.error('Error while setting account query:', error);\n                        frappe.msgprint(__('An error occurred while updating account options. Please try again.'));\n                    }\n                } else {\n                    console.warn('No valid data received for mode_of_payment:', frm.doc.mode_of_payment);\n                    frappe.msgprint(__('No accounts found for the selected mode of payment.'));\n                }\n            },\n            error: function (err) {\n                console.error('Error during server call:', err); // Log the error for debugging\n                frappe.msgprint(__('Failed to fetch account details from the server. Please check the console for more information.'));\n            }\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Journal Entry",
  "enabled": 1,
  "modified": "2024-12-24 10:28:34.110715",
  "module": "sil",
  "name": "Populate Journal Entry From Payment Info",
  "script": "frappe.ui.form.on('Journal Entry', {\n    refresh: function (frm) {\n        frm.add_custom_button('Get Receipts', function () {\n            show_receipt_selection_dialog(frm);\n        });\n    }\n});\n\nfunction show_receipt_selection_dialog(frm) {\n    frappe.call({\n        method: 'sil.services.payment_info_journal_entry_api.getAllReceiptDetailsForJournalEntry',\n        callback: function (r) {\n            if (r.message) {\n                const { table1_data, table2_data } = r.message;\n\n                if (!table1_data.length || !table2_data.length) {\n                    frappe.msgprint(__('No receipt data available.'));\n                    return;\n                }\n\n                const dialog = new frappe.ui.Dialog({\n                    title: 'Select Receipts For Journal Entry',\n                    size: \"large\",\n                    fields: [\n                        {\n                            label: 'Receipts',\n                            fieldname: 'receipts',\n                            fieldtype: 'HTML',\n                            options: `\n                                <div style=\"display: flex; justify-content: space-between;\">\n                                    <div style=\"width: 48%; padding-right: 2%;\">\n                                        <strong>Suspense Details (Debitor)</strong>\n                                        <div class=\"table-wrapper\">\n                                        <table class=\"table table-bordered receipt-table\">\n                                            <thead>\n                                                <tr>\n                                                    <th>Select</th>\n                                                    <th>Receipt ID</th>\n                                                    <th>Executive</th>\n                                                    <th>Reference No</th>\n                                                    <th>Reference Date</th>\n                                                    <th>Amount</th>\n                                                </tr>\n                                            </thead>\n                                            <tbody>\n                                                ${table1_data.map(item => `\n                                                    <tr>\n                                                        <td><input type=\"checkbox\" class=\"receipt-table1\" data-receipt-id=\"${item.receipt_id_1}\" data-amount=\"${item.amount_1}\" /></td>\n                                                        <td>${item.receipt_id_1}</td>\n                                                        <td>${item.executive}</td>\n                                                        <td>${item.reference_number_1}</td>\n                                                        <td>${item.reference_date_1}</td>\n                                                        <td>${item.amount_1}</td>\n                                                    </tr>\n                                                `).join('')}\n                                            </tbody>\n                                        </table>\n                                        </div>\n                                    </div>\n                                    <div style=\"width: 48%;\">\n                                        <strong>Payment Info Details  (Creditor)</strong>\n                                        <div class=\"table-wrapper\">\n                                        <table class=\"table table-bordered receipt-table\">\n                                            <thead>\n                                                <tr>\n                                                    <th>Select</th>\n                                                    <th>Receipt ID</th>\n                                                    <th>Executive</th>\n                                                    <th>Reference No</th>\n                                                    <th>Reference Date</th>\n                                                    <th>Amount</th>\n                                                </tr>\n                                            </thead>\n                                            <tbody>\n                                                ${table2_data.map(item => `\n                                                    <tr>\n                                                        <td><input type=\"checkbox\" name=\"receipt-selection\" class=\"receipt-table2\" data-receipt-id=\"${item.receipt_id_2}\" data-amount=\"${item.amount_2}\" /></td>\n                                                        <td>${item.receipt_id_2}</td>\n                                                        <td>${item.executive}</td>\n                                                         <td>${item.reference_number_2}</td>\n                                                        <td>${item.reference_date_2}</td>\n                                                        <td>${item.amount_2}</td>\n                                                    </tr>\n                                                `).join('')}\n                                            </tbody>\n                                        </table>\n                                        </div>\n                                    </div>\n                                </div>\n                            `\n                        }\n                        ,\n             {\n                fieldtype: 'Section Break'\n            },  \n            \n            {\n            fieldtype: 'HTML',\n            fieldname: 'button_container',\n            options: `\n                <div class=\"custom-button-container d-flex justify-content-end\">\n                    <button class=\"btn btn-primary custom-get-button m-2  \">Get Details</button>\n                    <button class=\"btn btn-primary custom-approve-button m-2\">Remove From Journal</button>\n                    <button class=\"btn btn-primary custom-reject-button m-2\">Reject</button>                     \n                </div>\n            `\n             }\n                    ],\n                    \n                });\n\n                  // Add custom CSS for table headers and border radius\n                $('<style>')\n                    .prop('type', 'text/css')\n                    .html(`\n                        .receipt-table {\n                            border-radius: 10px;\n                            overflow: hidden;\n                        }\n\n                        .receipt-table thead {\n                            background-color: grey;\n                            color: white;\n                        }\n\n                        .receipt-table th, .receipt-table td {\n                            border-radius: 0 !important; /* Ensure inner cells align */\n                        }\n                         .table-wrapper {\n                            max-height: 65vh; /* Limit table height */\n                            overflow-y: auto; /* Enable vertical scrolling */\n                            overflow-x: auto; /* Enable horizontal scrolling */\n                            white-space: nowrap; /* Prevent table cells from wrapping */\n                        }\n                    `)\n                    .appendTo('head');\n                dialog.show();\n                // Add checkbox validation\n                addCheckboxValidation('.receipt-table1');\n                addCheckboxValidation('.receipt-table2');\n                \n                 dialog.$wrapper.find('.modal-dialog').css({\n                    'width': '90%',  // Increase the width to 90% of the viewport, for example\n                    'max-width': '1500px' // Set a custom max-width to make it larger\n            }); \n                $(dialog.$body).on('click', '.custom-get-button', function() {\n                    get_details();\n                });\n                $(dialog.$body).on('click', '.custom-reject-button', function() {\n                    open_remark_dialog('Remark for Rejection');\n                });\n                \n                $(dialog.$body).on('click', '.custom-approve-button', function() {\n                    open_remark_dialog('Remove from Journal');\n                });                \n            }\n        }\n    });\n}\n\nfunction addCheckboxValidation(selector) {\n    $(document).on('change', selector, function () {\n        if ($(this).is(':checked')) {\n            // Uncheck all other checkboxes in the same group\n            $(selector).not(this).prop('checked', false);\n        }\n    });\n}\n    function get_details () {\n        const selected_from_table_1 = [];\n        const selected_from_table_2 = [];\n    \n        $('input.receipt-table1:checked').each(function () {\n            selected_from_table_1.push({\n                receipt_id: $(this).data('receipt-id'),\n                amount: $(this).data('amount')\n            });\n        });\n    \n        $('input.receipt-table2:checked').each(function () {\n            selected_from_table_2.push({\n                receipt_id: $(this).data('receipt-id'),\n                amount: $(this).data('amount')\n            });\n        });\n    \n        if (selected_from_table_1.length !== 1 || selected_from_table_2.length !== 1) {\n            frappe.msgprint(__('Please select exactly one entry from each table.'));\n            return;\n        }\n    \n        // Ensure selected amounts are equal\n        if (selected_from_table_1[0].amount !== selected_from_table_2[0].amount) {\n            frappe.msgprint(__('Amounts from both tables must be equal.'));\n            return;\n        }\n    \n        // Call server-side script\n        frappe.call({\n            method: 'sil.services.payment_info_journal_entry_api.getDetailsForSelectedReceipts',\n            args: {\n                receipt_1: selected_from_table_1[0],\n                receipt_2: selected_from_table_2[0]\n            },\n            callback: function (response) {\n                if (response.message) {\n                    // Populate the response data into the Journal Entry form\n                    frm.set_value('selected_receipt_1', response.message.receipt_1.receipt_id);\n                    frm.set_value('selected_amount_1', response.message.receipt_1.amount);\n                    frm.set_value('selected_receipt_2', response.message.receipt_2.receipt_id);\n                    frm.set_value('selected_amount_2', response.message.receipt_2.amount);\n    \n                    frappe.msgprint(__('Receipt details updated successfully.'));\n                    dialog.hide();\n                } else {\n                    frappe.msgprint(__('Failed to process the selected receipts.'));\n                }\n            }\n        });\n    }\n function open_remark_dialog(actionName) {\n     let remarkDialog = null\n     // Check if the dialog already exists\n    if (remarkDialog) {\n        remarkDialog.show();\n        return;\n    }\n        remarkDialog = new frappe.ui.Dialog({\n            title: `${actionName} `,\n            fields: [\n                {\n                    label: 'Remark',\n                    fieldname: 'remark',\n                    fieldtype: 'Small Text',\n                    placeholder: `Enter your remark`\n                }\n            ],\n            primary_action_label: 'Submit',\n            primary_action: function () {\n                const remark = remarkDialog.get_value('remark');\n                rejectReceiptIntimation(frm,dialog,selectedReceipts.join(', '),remark_entry)\n                // frappe.msgprint({\n                //     title: __('Action Completed'),\n                //     message: `${actionName} action performed with remark: ${remark}`,\n                //     indicator: 'blue'\n                // });\n                remarkDialog.hide();\n            }\n        });\n\n        remarkDialog.show();\n    }                    \n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Receipt",
  "enabled": 1,
  "modified": "2024-12-20 10:49:54.096324",
  "module": "sil",
  "name": "Populate Account Paid From Field",
  "script": "frappe.ui.form.on('Payment Receipt', {\n    custom_is_suspense_entry: function (frm) {\n        if (frm.doc.custom_is_suspense_entry) {\n            // Fetch the suspense account for the logged-in user's company\n            frappe.call({\n                method: \"frappe.client.get_value\",\n                args: {\n                    doctype: \"Account\",\n                    filters: { \n                        company: frm.doc.company,\n                        account_name:'Suspense' },\n                    fieldname: \"name\" // Replace with the actual fieldname for suspense account\n                },\n                callback: function (r) {\n                    if (r.message) {\n                        // Update the field with the retrieved suspense account\n                        frm.set_value('account_paid_from', r.message.name);\n                        // frappe.msgprint(__('Suspense Account updated to: {0}', [r.message.name]));\n                    } else {\n                        frappe.msgprint(__('No Suspense Account found for the company.'));\n                    }\n                }\n            });\n        } else {\n            // Clear the suspense account field if the checkbox is unchecked\n            frm.set_value('account_paid_from', null);\n        }\n    },\n    amount_paid:function(frm){\n        if (cur_frm.doc.amount_paid) {\n            cur_frm.set_value('amount_received', cur_frm.doc.amount_paid);\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Receipt",
  "enabled": 1,
  "modified": "2024-12-23 18:08:49.208922",
  "module": "sil",
  "name": "Suspense Details Dialog",
  "script": "frappe.ui.form.on('Payment Receipt', {\n    refresh(frm) {\n        // Add a custom button to open the Suspense Details dialog\n        frm.add_custom_button(__('Open Suspense Details'), function () {\n            open_suspense_dialog();\n        });\n    }\n});\n\nfunction open_suspense_dialog() {\n    const suspenseDialog = new frappe.ui.Dialog({\n        title: __('Suspense Details (Debitor)'),\n        size: \"large\",\n        fields: [\n            {\n                label: 'Suspense Details',\n                fieldname: 'suspense_details',\n                fieldtype: 'HTML',\n                options: `\n                    <div class=\"row g-3\">\n                        <div class=\"col-lg-2 col-md-4 col-sm-6\">\n                            <label for=\"executive\" class=\"filter-label\">Executive</label>\n                            <select id=\"executive\" class=\"form-control\">\n                                <option value=\"\" disabled selected>Select Executive</option>\n                            </select>\n                        </div>\n                        <div class=\"col-lg-2 col-md-4 col-sm-6\">\n                            <label for=\"deposit_date\" class=\"filter-label\">Deposit Date</label>\n                            <select id=\"deposit_date\" class=\"form-control\">\n                                <option value=\"\" disabled selected>Select Deposit Date</option>\n                            </select>\n                        </div>\n                        <div class=\"col-lg-2 col-md-4 col-sm-6\">\n                            <label for=\"payment_mode\" class=\"filter-label\">Payment Mode</label>\n                            <select id=\"payment_mode\" class=\"form-control\">\n                                <option value=\"\" disabled selected>Select Payment Mode</option>\n                            </select>\n                        </div>\n                        <div class=\"col-lg-2 col-md-4 col-sm-6\">\n                            <label for=\"reference_no\" class=\"filter-label\">Reference No</label>\n                            <select id=\"reference_no\" class=\"form-control\">\n                                <option value=\"\" disabled selected>Select Reference No</option>\n                            </select>\n                        </div>\n                        <div class=\"col-lg-2 col-md-4 col-sm-6\">\n                            <label for=\"reference_date\" class=\"filter-label\">Reference Date</label>\n                            <select id=\"reference_date\" class=\"form-control\">\n                                <option value=\"\" disabled selected>Select Reference Date</option>\n                            </select>\n                        </div>\n                        <div class=\"col-lg-2 col-md-4 col-sm-6\">\n                            <label for=\"amount\" class=\"filter-label\">Amount</label>\n                            <select id=\"amount\" class=\"form-control\">\n                                <option value=\"\" disabled selected>Select Amount</option>\n                            </select>\n                        </div>\n                    </div>\n                `\n            },\n            { fieldtype: 'Section Break' },\n            {\n                label: 'Receipts',\n                fieldname: 'receipts',\n                fieldtype: 'HTML',\n                options: `\n<div style=\"padding: 10px;\">\n    <div class=\"table-responsive\">\n        <table class=\"table table-bordered receipt-table\" style=\"border-radius:12px; overflow:hidden;\">\n            <thead>\n                <tr style=\"background-color:grey; color:white;\">\n                    <th>Receipt ID</th>\n                    <th>Executive</th>\n                    <th>Deposit Date</th>\n                    <th>Payment Mode</th>\n                    <th>Reference No</th>\n                    <th>Reference Date</th>\n                    <th>Amount</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td style=\"white-space: nowrap;\"> SIL-RCPT-0002</td>\n                    <td>John Doe Abhay Sajeev</td>\n                    <td>2024-12-01</td>\n                    <td>Credit Card</td>\n                    <td>123456789</td>\n                    <td>2024-12-01</td>\n                    <td>$1000</td>\n                </tr>\n                <tr>\n                    <td>SIL-RCPT-0002</td>\n                    <td>Jane Smith Arjun Premlal</td>\n                    <td>2024-12-05</td>\n                    <td style=\"white-space: nowrap;\">Bank Transfer</td>\n                    <td>98765432115</td>\n                    <td>2024-12-05</td>\n                    <td>$500000</td>\n                </tr>\n                <tr>\n                    <td>SIL-RCPT-0002</td>\n                    <td style=\"word-wrap: break-word\">Michael Brown Kiran Abhay Sajeev hael Brown Kiran Abhay Sajeev</td>\n                    <td>2024-12-10</td>\n                    <td>Cash</td>\n                    <td>112233445</td>\n                    <td>2024-12-10</td>\n                    <td>$250</td>\n                </tr>\n                <tr>\n                    <td>SIL-RCPT-0002</td>\n                    <td>Sarah White</td>\n                    <td>2024-12-15</td>\n                    <td>Cheque</td>\n                    <td>556677889</td>\n                    <td>2024-12-15</td>\n                    <td>$1200</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>\n                `\n            }\n        ]\n    });\n\n    // Show the dialog\n    suspenseDialog.show();\n\n    // Adjust dialog size\n    suspenseDialog.$wrapper.find('.modal-dialog').css({\n        'width': '90%',\n        'max-width': '1400px'\n    });\n\n    // Add responsive CSS for the dialog content\n    const style = document.createElement('style');\n    style.innerHTML = `\n        .table th, .table td {\n            padding: 12px 15px;\n            text-align: center;\n        }\n        .filter {\n            margin-bottom: 15px;\n        }\n        .filter select {\n            width: 100%;\n            background-color: #f9f9f9;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n        }\n        .filter select:focus {\n            border-color: #4CAF50;\n        }\n        .table-hover tbody tr:hover {\n            background-color: #f1f1f1;\n        }\n        .receipt-table th, .receipt-table td {\n            text-align: center;\n        }\n        .table-responsive {\n            overflow-x: auto;\n        }\n        .filter-label {\n            font-weight: bold;\n            font-size: 12px;\n        }\n        .form-control{\n            font-size: 11px;\n        }\n\n        /* Media Queries for responsiveness */\n        @media (max-width: 768px) {\n            .row {\n                display: block;\n            }\n            .filter {\n                width: 100%;\n                margin-bottom: 10px;\n            }\n            .filter select {\n                padding: 10px;\n            }\n        }\n\n        @media (max-width: 576px) {\n            .table th, .table td {\n                font-size: 10px;\n                padding: 8px;\n            }\n        }\n    `;\n    document.head.appendChild(style);\n}\n",
  "view": "Form"
 }
]